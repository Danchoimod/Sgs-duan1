package poly.nhatro.ui;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import com.toedter.calendar.JDateChooser;
import poly.nhatro.dao.ChiNhanhDAO;
import poly.nhatro.dao.HoaDonDAO;
import poly.nhatro.dao.NguoiThueDAO;
import poly.nhatro.dao.impl.ChiNhanhDAOImpl;
import poly.nhatro.dao.impl.NguoiThueDaoImpl;
import poly.nhatro.dao.impl.hoaDonDAOImpl;
import poly.nhatro.entity.HoaDon;
import poly.nhatro.util.XDialog;
import poly.nhatro.util.ExcelOutput;

/**
 * Panel quản lý hóa đơn
 * 
 * @author tranthuyngan
 */
public class HoaDonPanel extends javax.swing.JPanel implements HoaDonController {
    
    private final HoaDonDAO dao = new hoaDonDAOImpl();
    private final NguoiThueDAO nguoiThueDAO = new NguoiThueDaoImpl();
    private final ChiNhanhDAO chiNhanhDAO = new ChiNhanhDAOImpl();
    private HoaDon currentHoaDon = null;
    private int index = 0;
    
    public HoaDonPanel() {
        initComponents();
        setupForm();
        btnLoc.addActionListener(e -> filterByTrangThai());
    }
    
    /**
     * Thiết lập form ban đầu
     */
    private void setupForm() {
        setupComboBoxes();
        if (dateNgayTaoHoaDon != null) {
            dateNgayTaoHoaDon.setDate(new Date()); 
        }
    }
    
    /**
     * Thiết lập combo boxes với dữ liệu từ database
     */
    private void setupComboBoxes() {
        try {
            
            if (cboChiNhanh != null) {
                cboChiNhanh.removeAllItems();
                cboChiNhanh.addItem("");
                var chiNhanhList = chiNhanhDAO.getAll();
                for (var chiNhanh : chiNhanhList) {
                    cboChiNhanh.addItem(chiNhanh.getTenChiNhanh());                }
            }
            
            // Removed cboTenNguoiDung - now using only txtTenNguoiDung
            
            if (cboSoPhong != null) {
                cboSoPhong.removeAllItems();
                cboSoPhong.addItem("");
            }
            
            
            if (cboTrangThaiThanhToan != null) {
                cboTrangThaiThanhToan.removeAllItems();
                cboTrangThaiThanhToan.addItem("Chưa thanh toán");
                cboTrangThaiThanhToan.addItem("Đã thanh toán");
                cboTrangThaiThanhToan.setSelectedIndex(0);
            }
            
        } catch (Exception e) {
            System.err.println("Error setting up combo boxes: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        groupThanhToan = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        pnlMain = new poly.nhatro.util.RoundedPanel(30);
        ;
        jLabel12 = new javax.swing.JLabel();
        cboTrangThaiThanhToan = new javax.swing.JComboBox<>();
        cboSoPhong = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSoDienCu = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSoDienMoi = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSoNuocCu = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtSoNuocMoi = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtSoDienDaDung = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtSoNuocDaDung = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtTongTienDien = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtTongTienNuoc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTienPhong = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtTongTien = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cboChiNhanh = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        dateNgayTaoHoaDon = new com.toedter.calendar.JDateChooser();
        jLabel18 = new javax.swing.JLabel();
        txtTenNguoiDung = new javax.swing.JTextField();
        btnTaoHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/newfile.svg", 24, 24));
        btnSuaHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/edit.svg", 24, 24));
        btnXoaHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/delete.svg", 24, 24));
        btnLamMoi = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/clear.svg", 24, 24));
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        btnMoveFirst = new javax.swing.JButton();
        btnMovePrev = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();
        btnXuatHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/export.svg", 24, 24));
        btnLoc = new javax.swing.JButton();
        cboTimTheoTrangThai = new javax.swing.JComboBox<>();

        jLabel11.setText("jLabel11");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Hoá đơn");

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Hoá Đơn", "Tên Chi nhánh", "Tên phòng", "Tên người dùng", "Số điện cũ", "Số điện mới", "Số nước cũ", "Số nước mới", "Tổng số điện đã dùng", "Tổng số nước đã dùng", "Tiền điện", "Tiền nước", "Tiền phòng", "Tổng tiền", "Trạng thái thanh toán", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblHoaDon);

        pnlMain.setBackground(new java.awt.Color(153, 218, 250));

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel12.setText("Trạng thái thanh toán");

        cboTrangThaiThanhToan.setFont(new java.awt.Font("Helvetica Neue", 2, 14)); // NOI18N
        cboTrangThaiThanhToan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đã thanh toán", "Chưa thanh toán" }));

        cboSoPhong.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cboSoPhong.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboSoPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSoPhongActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel4.setText("Tên Người Dùng");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel6.setText("Số điện cũ");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel7.setText("Số Điện Mới");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel8.setText("Số Nước Cũ");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel9.setText("Số Nước Mới");

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel10.setText("Tổng số điện đã dùng");

        jLabel14.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel14.setText("Tổng số nước đã dùng");

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel15.setText("Tổng tiền điện");

        jLabel16.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel16.setText("Tổng tiền nước");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel2.setText("Tiền phòng");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 3, 24)); // NOI18N
        jLabel5.setText("Tổng tiền");

        txtTongTien.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        txtTongTien.setForeground(new java.awt.Color(255, 0, 0));

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel13.setText("ID Chi Nhánh");

        cboChiNhanh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboChiNhanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChiNhanhActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel17.setText("Ngày tạo hoá đơn");

        jLabel18.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel18.setText("Tên phòng");

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13)
                    .addComponent(jLabel18)
                    .addComponent(jLabel4)
                    .addComponent(jLabel12)
                    .addComponent(cboChiNhanh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboSoPhong, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTenNguoiDung)
                    .addComponent(cboTrangThaiThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlMainLayout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(jLabel6))
                                    .addGroup(pnlMainLayout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(jLabel8)))
                                .addGap(78, 78, 78))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtSoDienCu, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel2)
                                        .addComponent(txtTienPhong, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                        .addComponent(txtSoNuocCu)))
                                .addGap(11, 11, 11)))
                        .addGap(48, 48, 48)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(dateNgayTaoHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtSoDienMoi, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSoNuocMoi, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                                .addGap(42, 42, 42))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSoNuocDaDung)
                                    .addComponent(txtSoDienDaDung)
                                    .addComponent(jLabel10))
                                .addGap(60, 60, 60)
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtTongTienDien)
                                        .addComponent(jLabel16)
                                        .addComponent(txtTongTienNuoc, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(26, 26, 26))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel13)
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(cboChiNhanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addGap(11, 11, 11))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSoDienCu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoDienMoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoDienDaDung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTongTienDien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSoPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoNuocCu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTienPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenNguoiDung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cboTrangThaiThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTongTienNuoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoNuocDaDung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoNuocMoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateNgayTaoHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        btnTaoHoaDon.setBackground(new java.awt.Color(102, 229, 88));
        btnTaoHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnTaoHoaDon.setText("Tạo Hoá Đơn");
        btnTaoHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoHoaDonActionPerformed(evt);
            }
        });

        btnSuaHoaDon.setBackground(new java.awt.Color(255, 237, 49));
        btnSuaHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnSuaHoaDon.setText("Sửa Hoá Đơn");
        btnSuaHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaHoaDonActionPerformed(evt);
            }
        });

        btnXoaHoaDon.setBackground(new java.awt.Color(255, 72, 35));
        btnXoaHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnXoaHoaDon.setText("Xoá Hoá Đơn");
        btnXoaHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaHoaDonActionPerformed(evt);
            }
        });

        btnLamMoi.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnLamMoi.setText("Làm Mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnCheckAll.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        btnUncheckAll.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnDeleteCheckedItems.setText("Xoá các hoá đơn đã chọn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });

        btnMoveFirst.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMoveFirst.setText("|<");
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        btnMovePrev.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMovePrev.setText("<<");
        btnMovePrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePrevActionPerformed(evt);
            }
        });

        btnMoveNext.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMoveNext.setText(">>");
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });

        btnMoveLast.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMoveLast.setText(">|");
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        btnXuatHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnXuatHoaDon.setText("Xuất hoá đơn");
        btnXuatHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatHoaDonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnCheckAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnUncheckAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteCheckedItems)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMoveFirst)
                        .addGap(29, 29, 29)
                        .addComponent(btnMovePrev)
                        .addGap(18, 18, 18)
                        .addComponent(btnMoveNext)
                        .addGap(18, 18, 18)
                        .addComponent(btnMoveLast))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnTaoHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnSuaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnXuatHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnXuatHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnXoaHoaDon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSuaHoaDon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTaoHoaDon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCheckAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUncheckAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnMovePrev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMoveFirst, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMoveNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMoveLast, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnDeleteCheckedItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43))
        );

        btnLoc.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnLoc.setText("Lọc");
        btnLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocActionPerformed(evt);
            }
        });

        cboTimTheoTrangThai.setFont(new java.awt.Font("Helvetica Neue", 2, 14)); // NOI18N
        cboTimTheoTrangThai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Đã thanh toán", "Chưa thanh toán" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(485, 485, 485)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cboTimTheoTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnLoc)
                .addGap(62, 62, 62))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboTimTheoTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLoc))
                        .addGap(2, 2, 2)))
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        // TODO add your handling code here:
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        // TODO add your handling code here:
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    private void btnTaoHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoHoaDonActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnTaoHoaDonActionPerformed

    private void btnSuaHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaHoaDonActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnSuaHoaDonActionPerformed

    private void btnXoaHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaHoaDonActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnXoaHoaDonActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnXuatHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatHoaDonActionPerformed
        // TODO add your handling code here:
        try {
            if (tblHoaDon.getRowCount() == 0) {
                XDialog.alert("Không có dữ liệu hóa đơn để xuất!");
                return;
            }
            
            ExcelOutput.exportJTableToExcel(tblHoaDon, "Danh sách hóa đơn", "HoaDon");
            
            XDialog.alert("Xuất file Excel thành công!");
            
        } catch (Exception e) {
            e.printStackTrace();
            XDialog.alert("Lỗi khi xuất file Excel: " + e.getMessage());
        }
    }//GEN-LAST:event_btnXuatHoaDonActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        // TODO add your handling code here:
        this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMovePrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePrevActionPerformed
        // TODO add your handling code here:
        this.movePrevious();
    }//GEN-LAST:event_btnMovePrevActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        // TODO add your handling code here:
        this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        // TODO add your handling code here:
         this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) { 
            edit();
        }
    }//GEN-LAST:event_tblHoaDonMouseClicked

    private void cboChiNhanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChiNhanhActionPerformed
        onChiNhanhSelected();
    }//GEN-LAST:event_cboChiNhanhActionPerformed

    private void cboSoPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSoPhongActionPerformed
        onPhongSelected();
    }//GEN-LAST:event_cboSoPhongActionPerformed

    private void btnLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocActionPerformed
        filterByTrangThai();
    }//GEN-LAST:event_btnLocActionPerformed

    @Override
    public void setForm(HoaDon entity) {
        currentHoaDon = entity; 
        
        if (entity == null) {
            clear();
            return;
        }
        
        try {
            // Get user name by ID
            if (entity.getID_NguoiDung() != 0) {
                var users = nguoiThueDAO.findAll();
                for (var user : users) {
                    if (user.getID_NguoiDung() == entity.getID_NguoiDung()) {
                        txtTenNguoiDung.setText(user.getTenNguoiDung());
                        break;
                    }
                }
            }
            
            if (cboSoPhong != null) {
                cboSoPhong.setSelectedItem(String.valueOf(entity.getID_Phong()));
            }
            if (cboTrangThaiThanhToan != null) {
                cboTrangThaiThanhToan.setSelectedItem(entity.getTrangThai());
            }
            if (dateNgayTaoHoaDon != null) {
                dateNgayTaoHoaDon.setDate(entity.getNgayTao());
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    @Override
    public HoaDon getForm() {
        try {
            HoaDon hoaDon = new HoaDon();
            
            
            if (currentHoaDon != null) {
                hoaDon.setID_HoaDon(currentHoaDon.getID_HoaDon());
            }
            
            String tenNguoiDung = txtTenNguoiDung.getText();
            if (tenNguoiDung != null && !tenNguoiDung.trim().isEmpty()) {
                var users = nguoiThueDAO.findAll();
                for (var user : users) {
                    if (user.getTenNguoiDung().equals(tenNguoiDung)) {
                        hoaDon.setID_NguoiDung(user.getID_NguoiDung());
                        break;
                    }
                }
            }
            
            String phongName = (String) cboSoPhong.getSelectedItem();
            if (phongName != null && !phongName.trim().isEmpty()) {
                // Find room ID from room name
                String chiNhanhSelected = (String) cboChiNhanh.getSelectedItem();
                if (chiNhanhSelected != null && !chiNhanhSelected.isEmpty()) {
                    var chiNhanhList = chiNhanhDAO.getAll();
                    int chiNhanhId = -1;
                    for (var chiNhanh : chiNhanhList) {
                        if (chiNhanh.getTenChiNhanh().equals(chiNhanhSelected)) {
                            chiNhanhId = chiNhanh.getID_ChiNhanh();
                            break;
                        }
                    }

                    if (chiNhanhId != -1) {
                        List<Object[]> rooms = dao.getRoomsByChiNhanh(chiNhanhId);
                        for (Object[] room : rooms) {
                            if (room[1].toString().equals(phongName)) {
                                hoaDon.setID_Phong((int) room[0]);
                                break;
                            }
                        }
                    }
                }
            }
                        
            String trangThai = (String) cboTrangThaiThanhToan.getSelectedItem();
            hoaDon.setTrangThai(trangThai);
            
            Date ngayTao = dateNgayTaoHoaDon.getDate();
            hoaDon.setNgayTao(ngayTao != null ? ngayTao : new Date());
                                
            return hoaDon;
            
        } catch (NumberFormatException e) {
            XDialog.alert("Vui lòng nhập đúng định dạng số!");
            return null;
        } catch (Exception e) {
            XDialog.alert("Lỗi khi lấy dữ liệu từ form: " + e.getMessage());
            return null;
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnLoc;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrev;
    private javax.swing.JButton btnSuaHoaDon;
    private javax.swing.JButton btnTaoHoaDon;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnXoaHoaDon;
    private javax.swing.JButton btnXuatHoaDon;
    private javax.swing.JComboBox<String> cboChiNhanh;
    private javax.swing.JComboBox<String> cboSoPhong;
    private javax.swing.JComboBox<String> cboTimTheoTrangThai;
    private javax.swing.JComboBox<String> cboTrangThaiThanhToan;
    private com.toedter.calendar.JDateChooser dateNgayTaoHoaDon;
    private javax.swing.ButtonGroup groupThanhToan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTextField txtSoDienCu;
    private javax.swing.JTextField txtSoDienDaDung;
    private javax.swing.JTextField txtSoDienMoi;
    private javax.swing.JTextField txtSoNuocCu;
    private javax.swing.JTextField txtSoNuocDaDung;
    private javax.swing.JTextField txtSoNuocMoi;
    private javax.swing.JTextField txtTenNguoiDung;
    private javax.swing.JTextField txtTienPhong;
    private javax.swing.JTextField txtTongTien;
    private javax.swing.JTextField txtTongTienDien;
    private javax.swing.JTextField txtTongTienNuoc;
    // End of variables declaration//GEN-END:variables


    @Override
    public void init() {
        fillToTable();
        clear();
    }

    @Override
    public void open() {
        fillToTable();
    }


    @Override
    public void create() {     
        try {
            if (!validateForm()) {
                return;
            }
            
            HoaDon entity = this.getForm();
            if (entity != null) {
                String chiNhanhTen = (String) cboChiNhanh.getSelectedItem();
                if (chiNhanhTen != null && !chiNhanhTen.trim().isEmpty()) {
                    var chiNhanhList = chiNhanhDAO.getAll();
                    for (var chiNhanh : chiNhanhList) {
                        if (chiNhanh.getTenChiNhanh().equals(chiNhanhTen)) {
                            entity.setID_ChiNhanh(chiNhanh.getID_ChiNhanh());
                            break;
                        }
                    }
                }
                
                dao.create(entity);
                this.fillToTable();
                this.clear();
                XDialog.alert("Tạo mới hoá đơn thành công!");
            }
        } catch (NumberFormatException e) {
            XDialog.alert("ID Hợp Đồng phải là số nguyên!");
        } catch(Exception e) {
            XDialog.alert("Lỗi khi tạo mới hoá đơn: " + e.getMessage());   
            e.printStackTrace();
        }
    }

    @Override
    public void update() {
        if (!validateForm()) {
            return;
        }
        
        HoaDon entity = getForm();
        if(entity != null) {
            try {
                dao.update(entity);
                fillToTable();
                setEditable(false); 
                XDialog.alert("Cập nhật hoá đơn thành công!");
            }catch(Exception e) {
                XDialog.alert("Cập nhật thất bại! " + e.getMessage());
                e.printStackTrace();
            }         
        }              
    }

    @Override
    public void delete() {
        int selectRow = tblHoaDon.getSelectedRow();
        
        if(selectRow >= 0) {
            try {
                Object value = tblHoaDon.getValueAt(selectRow, 0);
                int hoaDonId = (Integer) value;
                
                if(XDialog.confirm("Bạn có thật sự muốn xoá hóa đơn ID: " + hoaDonId + "?")) {
                    dao.deleteById(hoaDonId);
                    fillToTable();
                    clear();
                    XDialog.alert("Xoá hoá đơn thành công!");
                }
            } catch(Exception e) {
                XDialog.alert("Xoá hoá đơn thất bại: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            XDialog.alert("Vui lòng chọn một hóa đơn để xóa!");
        }    
    }

    @Override
    public void clear() {
        currentHoaDon = null; 
        
        // Removed cboTenNguoiDung - now using only txtTenNguoiDung
        if (cboSoPhong != null && cboSoPhong.getItemCount() > 0) {
            cboSoPhong.setSelectedIndex(0);
        }
        if (cboTrangThaiThanhToan != null && cboTrangThaiThanhToan.getItemCount() > 0) {
            cboTrangThaiThanhToan.setSelectedIndex(0);
        }
        
        if (dateNgayTaoHoaDon != null) {
            dateNgayTaoHoaDon.setDate(new Date());
        }
        
        if (tblHoaDon != null) {
            tblHoaDon.clearSelection();
        }
        
        clearRoomDetails();
        
        setEditable(true); 
    }

    @Override
    public void edit() {
        int selectRow = tblHoaDon.getSelectedRow();
        
        if(selectRow >= 0) {
            try {
                fillFormFromTableRow(selectRow);
                setEditable(true); 
                    
            } catch(Exception e) {
                e.printStackTrace();
                XDialog.alert("Lỗi khi tải dữ liệu: " + e.getMessage());
            }          
        } else {
            XDialog.alert("Vui lòng chọn một hóa đơn để chỉnh sửa!");
        }
        
    }
    
    /**
     * Fill form từ dữ liệu trên dòng được chọn trong bảng
     */
    private void fillFormFromTableRow(int rowIndex) {
        try {                   
            Object hoaDonId = tblHoaDon.getValueAt(rowIndex, 0);
            Object chiNhanhValue = tblHoaDon.getValueAt(rowIndex, 1);
            Object soPhongValue = tblHoaDon.getValueAt(rowIndex, 2);
            Object tenNguoiDung = tblHoaDon.getValueAt(rowIndex, 3);
            Object soDienCu = tblHoaDon.getValueAt(rowIndex, 4);
            Object soDienMoi = tblHoaDon.getValueAt(rowIndex, 5);
            Object soNuocCu = tblHoaDon.getValueAt(rowIndex, 6);
            Object soNuocMoi = tblHoaDon.getValueAt(rowIndex, 7);
            Object soDienDaDung = tblHoaDon.getValueAt(rowIndex, 8);
            Object soNuocDaDung = tblHoaDon.getValueAt(rowIndex, 9);
            Object tienDien = tblHoaDon.getValueAt(rowIndex, 10);
            Object tienNuoc = tblHoaDon.getValueAt(rowIndex, 11);
            Object tienPhong = tblHoaDon.getValueAt(rowIndex, 12);
            Object tongTien = tblHoaDon.getValueAt(rowIndex, 13);
            Object trangThai = tblHoaDon.getValueAt(rowIndex, 14);
            
            if (hoaDonId != null) {
                int id = (hoaDonId instanceof Integer) ? (Integer) hoaDonId : Integer.parseInt(hoaDonId.toString());
                currentHoaDon = dao.findById(id);
            }
            
            if (chiNhanhValue != null && cboChiNhanh != null) {
                cboChiNhanh.setSelectedItem(chiNhanhValue.toString());
            }
            
            onChiNhanhSelected();
            
            if (soPhongValue != null && cboSoPhong != null) {
                String soPhongToSelect = soPhongValue.toString();
                for (int i = 0; i < cboSoPhong.getItemCount(); i++) {
                    String item = (String) cboSoPhong.getItemAt(i);
                    if (item != null && item.trim().equals(soPhongToSelect.trim())) {
                        cboSoPhong.setSelectedIndex(i);
                        break;
                    }
                }
            }

            if (tenNguoiDung != null) {
                // Fill vào text field
                txtTenNguoiDung.setText(tenNguoiDung.toString());
            }
            
            if (trangThai != null && cboTrangThaiThanhToan != null) {
                cboTrangThaiThanhToan.setSelectedItem(trangThai.toString());
            }
            
            if (currentHoaDon != null && dateNgayTaoHoaDon != null) {
                dateNgayTaoHoaDon.setDate(currentHoaDon.getNgayTao());
            }
            
            txtSoDienCu.setText(soDienCu != null ? soDienCu.toString() : "");
            txtSoDienMoi.setText(soDienMoi != null ? soDienMoi.toString() : "");
            txtSoNuocCu.setText(soNuocCu != null ? soNuocCu.toString() : "");
            txtSoNuocMoi.setText(soNuocMoi != null ? soNuocMoi.toString() : "");
            txtSoDienDaDung.setText(soDienDaDung != null ? soDienDaDung.toString() : "");
            txtSoNuocDaDung.setText(soNuocDaDung != null ? soNuocDaDung.toString() : "");
            
            if (tienDien != null) {
                double tienDienValue = Double.parseDouble(tienDien.toString().replace(",", ""));
                txtTongTienDien.setText(String.format("%,.0f", tienDienValue));
            }
            if (tienNuoc != null) {
                double tienNuocValue = Double.parseDouble(tienNuoc.toString().replace(",", ""));
                txtTongTienNuoc.setText(String.format("%,.0f", tienNuocValue));
            }
            if (tienPhong != null) {
                double tienPhongValue = Double.parseDouble(tienPhong.toString().replace(",", ""));
                txtTienPhong.setText(String.format("%,.0f", tienPhongValue));
            }
            if (tongTien != null) {
                double tongTienValue = Double.parseDouble(tongTien.toString().replace(",", ""));
                txtTongTien.setText(String.format("%,.0f", tongTienValue));
            }
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi fill dữ liệu từ bảng: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public void setEditable(boolean editable) {
        // Chỉ cho phép chỉnh sửa các combobox
        if (cboChiNhanh != null) {
            cboChiNhanh.setEnabled(editable);
        }
        // txtTenNguoiDung is read-only - only for displaying user info
        if (txtTenNguoiDung != null) {
            txtTenNguoiDung.setEditable(false);
        }
        if (cboSoPhong != null) {
            cboSoPhong.setEnabled(editable);
        }
        if (cboTrangThaiThanhToan != null) {
            cboTrangThaiThanhToan.setEnabled(editable);
        }

        // Các trường còn lại (JTextField, JDateChooser) không được sửa
        if (dateNgayTaoHoaDon != null) {
            dateNgayTaoHoaDon.setEnabled(false);
        }
        txtSoDienCu.setEditable(false);
        txtSoDienMoi.setEditable(false);
        txtSoNuocCu.setEditable(false);
        txtSoNuocMoi.setEditable(false);
        txtSoDienDaDung.setEditable(false);
        txtSoNuocDaDung.setEditable(false);
        txtTongTienDien.setEditable(false);
        txtTongTienNuoc.setEditable(false);
        txtTienPhong.setEditable(false);
        txtTongTien.setEditable(false);
    }

    @Override
    public void fillToTable() {
        try {
            List<Object[]> detailedBillingData = dao.getDetailedBillingData();
            
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 15; 
                }
                
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    if (columnIndex == 15) { 
                        return Boolean.class;
                    }
                    return String.class;
                }
            };
            
            String[] columnNames = {
                "ID Hoá Đơn", "Tên Chi nhánh", "Tên phòng", "Tên người dùng", "Số điện cũ", "Số điện mới", 
                "Số nước cũ", "Số nước mới", "Tổng số điện đã dùng", "Tổng số nước đã dùng", 
                "Tiền điện", "Tiền nước", "Tiền phòng", "Tổng tiền", "Trạng thái thanh toán", "Chọn"
            };
            model.setColumnIdentifiers(columnNames);
            
            for (Object[] row : detailedBillingData) {
                Object[] tableRow = new Object[16];
                System.arraycopy(row, 0, tableRow, 0, 15);
                tableRow[15] = false; 
                model.addRow(tableRow);
            }
            
            tblHoaDon.setModel(model);
            tblHoaDon.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải dữ liệu: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void setCheckedAll(boolean checked) {
        try {
            if (tblHoaDon.getColumnCount() > 15) {
                for (int i = 0; i < tblHoaDon.getRowCount(); i++) {
                    tblHoaDon.setValueAt(checked, i, 15); 
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public void checkAll() {
        this.setCheckedAll(true);    }

    @Override
    public void uncheckAll() {        
        this.setCheckedAll(false);    
    }

    @Override
    public void deleteCheckedItems() {
        try {
            List<Integer> idsToDelete = new ArrayList<>();
            
            for (int i = 0; i < tblHoaDon.getRowCount(); i++) {
                if (tblHoaDon.getColumnCount() > 15) {
                    Boolean isChecked = (Boolean) tblHoaDon.getValueAt(i, 15); 
                    if (isChecked != null && isChecked) {                 
                        Object idValue = tblHoaDon.getValueAt(i, 0); 
                        if (idValue instanceof Integer) {
                            idsToDelete.add((Integer) idValue);
                        }
                    }
                }
            }
            
            if (idsToDelete.isEmpty()) {
                XDialog.alert("Không có mục nào được chọn để xóa!");
                return;
            }
            
            if (XDialog.confirm("Bạn thực sự muốn xóa " + idsToDelete.size() + " mục đã chọn?")) {
                for (Integer id : idsToDelete) {
                    dao.deleteById(id);
                }
                this.fillToTable();
                this.clear();
                XDialog.alert("Đã xóa " + idsToDelete.size() + " mục thành công!");
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi xóa các mục đã chọn: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);     }

    @Override
    public void movePrevious() {
        this.moveTo(tblHoaDon.getSelectedRow() - 1);    }

    @Override
    public void moveNext() {
        this.moveTo(tblHoaDon.getSelectedRow() + 1);    }

    @Override
    public void moveLast() {
        this.moveTo(tblHoaDon.getRowCount() - 1);    }

    @Override
    public void moveTo(int rowIndex) {
    try {
            int rowCount = tblHoaDon.getRowCount();
            if (rowCount == 0) {
                return;
            }
            
            if (rowIndex < 0) {
                index = 0;
            } else if (rowIndex >= rowCount) {
                index = rowCount - 1;
            } else {
                index = rowIndex;
            }
            
            tblHoaDon.setRowSelectionInterval(index, index);
            
            Integer id = (Integer) tblHoaDon.getValueAt(index, 0);
            if (id != null) {
                HoaDon nguoiThue = dao.findById(id);
                if (nguoiThue != null) {
                    setForm(nguoiThue);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }          }
    
    private boolean validateForm() {
        String tenNguoiDung = txtTenNguoiDung.getText();
        if (tenNguoiDung == null || tenNguoiDung.trim().isEmpty()) {
            XDialog.alert("Vui lòng nhập tên người dùng!");
            return false;
        }
        
        String phongIdStr = (String) cboSoPhong.getSelectedItem();
        if (phongIdStr == null || phongIdStr.trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn phòng!");
            return false;
        }
                
        String trangThai = (String) cboTrangThaiThanhToan.getSelectedItem();
        if (trangThai == null || trangThai.trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn trạng thái thanh toán!");
            return false;
        }
        
        return true;
    }
    
    /**
     * Xử lý khi chọn chi nhánh - fill danh sách phòng
     */
    private void onChiNhanhSelected() {
        try {
            String selectedValue = (String) cboChiNhanh.getSelectedItem();
            if (selectedValue == null || selectedValue.trim().isEmpty()) {
                cboSoPhong.removeAllItems();
                cboSoPhong.addItem("");
                clearRoomDetails();
                return;
            }
            
            var chiNhanhList = chiNhanhDAO.getAll();
            int chiNhanhId = -1;
            for (var chiNhanh : chiNhanhList) {
                if (chiNhanh.getTenChiNhanh().equals(selectedValue)) {
                    chiNhanhId = chiNhanh.getID_ChiNhanh();
                    break;
                }
            }

            if (chiNhanhId != -1) {
                List<Object[]> rooms = dao.getRoomsByChiNhanh(chiNhanhId);
                
                cboSoPhong.removeAllItems();
                cboSoPhong.addItem("");
                
                for (Object[] room : rooms) {
                    cboSoPhong.addItem((String) room[1]); 
                }
            }
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải danh sách phòng: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void onPhongSelected() {
        try {
            String selectedValue = (String) cboSoPhong.getSelectedItem();
            if (selectedValue == null || selectedValue.trim().isEmpty()) {
                clearRoomDetails();
                return;
            }
            
            int phongId = -1;
            String chiNhanhSelected = (String) cboChiNhanh.getSelectedItem();
            if(chiNhanhSelected != null && !chiNhanhSelected.isEmpty()){
                var chiNhanhList = chiNhanhDAO.getAll();
                int chiNhanhId = -1;
                for (var chiNhanh : chiNhanhList) {
                    if (chiNhanh.getTenChiNhanh().equals(chiNhanhSelected)) {
                        chiNhanhId = chiNhanh.getID_ChiNhanh();
                        break;
                    }
                }

                if(chiNhanhId != -1){
                    List<Object[]> rooms = dao.getRoomsByChiNhanh(chiNhanhId);
                    for (Object[] room : rooms) {
                        if (room[1].toString().equals(selectedValue)) {
                            phongId = (int) room[0];
                            break;
                        }
                    }
                }
            }
            
            if (phongId != -1) {
                Object[] roomData = dao.getRoomDetailData(phongId);
                
                if (roomData != null) {                                   
                    txtSoDienCu.setText(String.valueOf(roomData[1]));
                    txtSoDienMoi.setText(String.valueOf(roomData[2]));
                    txtSoNuocCu.setText(String.valueOf(roomData[3]));
                    txtSoNuocMoi.setText(String.valueOf(roomData[4]));
                    txtSoDienDaDung.setText(String.valueOf(roomData[5]));
                    txtSoNuocDaDung.setText(String.valueOf(roomData[6]));
                    txtTongTienDien.setText(String.format("%,.0f", (Double)roomData[7]));
                    txtTongTienNuoc.setText(String.format("%,.0f", (Double)roomData[8]));
                    txtTienPhong.setText(String.format("%,.0f", (Double)roomData[9]));
                    txtTongTien.setText(String.format("%,.0f", (Double)roomData[10]));
                    
                    String tenNguoiDung = (String) roomData[0];
                    if (tenNguoiDung != null) {
                        // Fill tên người thuê vào text field
                        txtTenNguoiDung.setText(tenNguoiDung);
                    }
                }
            }
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải thông tin phòng: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Xóa thông tin chi tiết phòng
     */
    private void clearRoomDetails() {
        txtSoDienCu.setText("");
        txtSoDienMoi.setText("");
        txtSoNuocCu.setText("");
        txtSoNuocMoi.setText("");
        txtSoDienDaDung.setText("");
        txtSoNuocDaDung.setText("");
        txtTongTienDien.setText("");
        txtTongTienNuoc.setText("");
        txtTienPhong.setText("");
        txtTongTien.setText("");
        txtTenNguoiDung.setText(""); // Xóa tên người thuê
    }
    
    private void filterByTrangThai() {
        try {
            String trangThai = (String) cboTimTheoTrangThai.getSelectedItem();
            List<Object[]> filteredData;

            if (trangThai.equals("Tất cả")) {
                filteredData = dao.getDetailedBillingData();
            } else {
                filteredData = dao.getDetailedBillingDataByStatus(trangThai);
            }

            DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
            model.setRowCount(0);

            for (Object[] row : filteredData) {
                Object[] tableRow = new Object[16];
                System.arraycopy(row, 0, tableRow, 0, 15);
                tableRow[15] = false; 
                model.addRow(tableRow);
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi lọc dữ liệu: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
