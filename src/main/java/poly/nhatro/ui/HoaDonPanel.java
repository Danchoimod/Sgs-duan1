package poly.nhatro.ui;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import com.toedter.calendar.JDateChooser;
import poly.nhatro.dao.ChiNhanhDAO;
import poly.nhatro.dao.HoaDonDAO;
import poly.nhatro.dao.HopDongDAO;
import poly.nhatro.dao.NguoiThueDAO;
import poly.nhatro.dao.impl.ChiNhanhDAOImpl;
import poly.nhatro.dao.impl.HopDongImpl;
import poly.nhatro.dao.impl.NguoiThueDaoImpl;
import poly.nhatro.dao.impl.hoaDonDAOImpl;
import poly.nhatro.entity.HoaDon;
import poly.nhatro.entity.HopDong;
import poly.nhatro.util.XDialog;
import poly.nhatro.util.ExcelOutput;

/**
 * Panel quản lý hóa đơn
 * 
 * @author tranthuyngan
 */
public class HoaDonPanel extends javax.swing.JPanel implements HoaDonController {
    
    private final HoaDonDAO dao = new hoaDonDAOImpl();
    private final NguoiThueDAO nguoiThueDAO = new NguoiThueDaoImpl();
    private final ChiNhanhDAO chiNhanhDAO = new ChiNhanhDAOImpl();
    private final HopDongDAO hopDongDAO = new HopDongImpl();
    private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    private HoaDon currentHoaDon = null;
    private int index = 0;
    
    public HoaDonPanel() {
        initComponents();
        setupForm();
    }
    
    /**
     * Thiết lập form ban đầu
     */
    private void setupForm() {
        setupComboBoxes();
        // JDateChooser is naturally editable, no need to set editable property
        dateNgayTaoHoaDon.setDate(new Date()); // Set current date as default
    }
    
    /**
     * Thiết lập combo boxes với dữ liệu từ database
     */
    private void setupComboBoxes() {
        try {
            cboId_HoaDon.removeAllItems();
            cboId_HoaDon.addItem("");
            
            cboId_NguoiDung.removeAllItems();
            cboId_NguoiDung.addItem("");
            try {
                var users = nguoiThueDAO.findAll();
                for (var user : users) {
                    cboId_NguoiDung.addItem(String.valueOf(user.getID_NguoiDung()));
                }
            } catch (Exception e) {
                System.err.println("Error loading users: " + e.getMessage());
            }
            
            cboId_Phong.removeAllItems();
            cboId_Phong.addItem("");
            
            cboId_HopDong.removeAllItems();
            cboId_HopDong.addItem("");
            
            cboTrangThaiThanhToan.removeAllItems();
            cboTrangThaiThanhToan.addItem("Chưa thanh toán");
            cboTrangThaiThanhToan.addItem("Đã thanh toán");
            cboTrangThaiThanhToan.setSelectedIndex(0);
            
        } catch (Exception e) {
            System.err.println("Error setting up combo boxes: " + e.getMessage());
            e.printStackTrace();
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        groupThanhToan = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        pnlMain = new poly.nhatro.util.RoundedPanel(30);
        ;
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dateNgayTaoHoaDon = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cboId_HoaDon = new javax.swing.JComboBox<>();
        cboTrangThaiThanhToan = new javax.swing.JComboBox<>();
        cboId_Phong = new javax.swing.JComboBox<>();
        cboId_HopDong = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cboId_NguoiDung = new javax.swing.JComboBox<>();
        btnTaoHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/newfile.svg", 24, 24));
        btnSuaHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/edit.svg", 24, 24));
        btnXoaHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/delete.svg", 24, 24));
        btnLamMoi = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/clear.svg", 24, 24));
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        btnMoveFirst = new javax.swing.JButton();
        btnMovePrev = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();
        btnXuatHoaDon = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/export.svg", 24, 24));

        jLabel11.setText("jLabel11");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Hoá đơn");

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID_Hoá Đơn", "Trạng thái hoá đơn", "Ngày tạo hoá đơn", "ID_người dùng", "ID Phòng", "ID Hơp đồng", "ID_Chi nhánh", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblHoaDon);

        pnlMain.setBackground(new java.awt.Color(153, 218, 250));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        jLabel2.setText("ID Hoá đơn");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        jLabel3.setText("ID_Phòng");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        jLabel5.setText("Ngày tạo hoá đơn");

        dateNgayTaoHoaDon.setFont(new java.awt.Font("Helvetica Neue", 2, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        jLabel12.setText("Trạng thái thanh toán");

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        jLabel13.setText("ID_Hợp đồng");

        cboId_HoaDon.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cboId_HoaDon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboTrangThaiThanhToan.setFont(new java.awt.Font("Helvetica Neue", 2, 14)); // NOI18N
        cboTrangThaiThanhToan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đã thanh toán", "Chưa thanh toán" }));

        cboId_Phong.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cboId_Phong.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboId_HopDong.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cboId_HopDong.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        jLabel4.setText("ID_NguoiDung");

        cboId_NguoiDung.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cboId_NguoiDung.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMainLayout.createSequentialGroup()
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel12)
                                .addComponent(cboId_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cboTrangThaiThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(64, 64, 64))
                        .addGroup(pnlMainLayout.createSequentialGroup()
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cboId_HoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(120, 120, 120)
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel13)
                                .addComponent(cboId_NguoiDung, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cboId_HopDong, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dateNgayTaoHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(201, 201, 201))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cboId_HoaDon)
                    .addComponent(cboId_NguoiDung, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboId_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboId_HopDong, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel12))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateNgayTaoHoaDon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboTrangThaiThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        btnTaoHoaDon.setBackground(new java.awt.Color(102, 229, 88));
        btnTaoHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnTaoHoaDon.setText("Tạo Hoá Đơn");
        btnTaoHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoHoaDonActionPerformed(evt);
            }
        });

        btnSuaHoaDon.setBackground(new java.awt.Color(255, 237, 49));
        btnSuaHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnSuaHoaDon.setText("Sửa Hoá Đơn");
        btnSuaHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaHoaDonActionPerformed(evt);
            }
        });

        btnXoaHoaDon.setBackground(new java.awt.Color(255, 72, 35));
        btnXoaHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnXoaHoaDon.setText("Xoá Hoá Đơn");
        btnXoaHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaHoaDonActionPerformed(evt);
            }
        });

        btnLamMoi.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnLamMoi.setText("Làm Mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnCheckAll.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnCheckAll.setText("Chọn tất cả");

        btnUncheckAll.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnDeleteCheckedItems.setText("Xoá các hoá đơn đã chọn");

        btnMoveFirst.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMoveFirst.setText("|<");
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        btnMovePrev.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMovePrev.setText("<<");
        btnMovePrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePrevActionPerformed(evt);
            }
        });

        btnMoveNext.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMoveNext.setText(">>");
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });

        btnMoveLast.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMoveLast.setText(">|");
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        btnXuatHoaDon.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        btnXuatHoaDon.setText("Xuất hoá đơn");
        btnXuatHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatHoaDonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnCheckAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnUncheckAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteCheckedItems)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                        .addComponent(btnMoveFirst)
                        .addGap(29, 29, 29)
                        .addComponent(btnMovePrev)
                        .addGap(18, 18, 18)
                        .addComponent(btnMoveNext)
                        .addGap(18, 18, 18)
                        .addComponent(btnMoveLast))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnTaoHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnSuaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnXuatHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnXuatHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnXoaHoaDon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSuaHoaDon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTaoHoaDon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnCheckAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addComponent(btnUncheckAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteCheckedItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnMovePrev)
                        .addComponent(btnMoveNext)
                        .addComponent(btnMoveLast)
                        .addComponent(btnMoveFirst)))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(485, 485, 485)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNgayTaoHoaDonActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnTaoHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoHoaDonActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnTaoHoaDonActionPerformed

    private void btnSuaHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaHoaDonActionPerformed
        // TODO add your handling code here:
        this.edit();
    }//GEN-LAST:event_btnSuaHoaDonActionPerformed

    private void btnXoaHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaHoaDonActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnXoaHoaDonActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnXuatHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatHoaDonActionPerformed
        // TODO add your handling code here:
        try {
            if (tblHoaDon.getRowCount() == 0) {
                XDialog.alert("Không có dữ liệu hóa đơn để xuất!");
                return;
            }
            
            ExcelOutput.exportJTableToExcel(tblHoaDon, "Danh sách hóa đơn", "HoaDon");
            
            XDialog.alert("Xuất file Excel thành công!");
            
        } catch (Exception e) {
            e.printStackTrace();
            XDialog.alert("Lỗi khi xuất file Excel: " + e.getMessage());
        }
    }//GEN-LAST:event_btnXuatHoaDonActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        // TODO add your handling code here:
        this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMovePrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePrevActionPerformed
        // TODO add your handling code here:
        this.movePrevious();
    }//GEN-LAST:event_btnMovePrevActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        // TODO add your handling code here:
        this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        // TODO add your handling code here:
         this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    @Override
    public void setForm(HoaDon entity) {
        currentHoaDon = entity; 
        
        if (entity == null) {
            clear();
            return;
        }
        
        try {
            cboId_HoaDon.setSelectedItem(String.valueOf(entity.getID_HoaDon()));
            cboId_NguoiDung.setSelectedItem(String.valueOf(entity.getID_NguoiDung()));
            cboId_Phong.setSelectedItem(String.valueOf(entity.getID_Phong()));
            cboId_HopDong.setSelectedItem(String.valueOf(entity.getID_HopDong()));
            
            // Set payment status
            cboTrangThaiThanhToan.setSelectedItem(entity.getTrangThai());
            
            // Set creation date
            dateNgayTaoHoaDon.setDate(entity.getNgayTao());
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    @Override
    public HoaDon getForm() {
        try {
            HoaDon hoaDon = new HoaDon();
            
            String hoaDonIdStr = (String) cboId_HoaDon.getSelectedItem();
            if (hoaDonIdStr != null && !hoaDonIdStr.trim().isEmpty()) {
                hoaDon.setID_HoaDon(Integer.parseInt(hoaDonIdStr));
            }
            
            String nguoiDungIdStr = (String) cboId_NguoiDung.getSelectedItem();
            if (nguoiDungIdStr != null && !nguoiDungIdStr.trim().isEmpty()) {
                hoaDon.setID_NguoiDung(Integer.parseInt(nguoiDungIdStr));
            }
            
            String phongIdStr = (String) cboId_Phong.getSelectedItem();
            if (phongIdStr != null && !phongIdStr.trim().isEmpty()) {
                hoaDon.setID_Phong(Integer.parseInt(phongIdStr));
            }
            
            String hopDongIdStr = (String) cboId_HopDong.getSelectedItem();
            if (hopDongIdStr != null && !hopDongIdStr.trim().isEmpty()) {
                hoaDon.setID_HopDong(Integer.parseInt(hopDongIdStr));
            }
            
            String trangThai = (String) cboTrangThaiThanhToan.getSelectedItem();
            hoaDon.setTrangThai(trangThai);
            
            Date ngayTao = dateNgayTaoHoaDon.getDate();
            hoaDon.setNgayTao(ngayTao != null ? ngayTao : new Date());
                                
            return hoaDon;
            
        } catch (NumberFormatException e) {
            XDialog.alert("Vui lòng nhập đúng định dạng số!");
            return null;
        } catch (Exception e) {
            XDialog.alert("Lỗi khi lấy dữ liệu từ form: " + e.getMessage());
            return null;
        }
    }
    
    /**
     * Clear tất cả dữ liệu trên form
     */
    
    /**
     * Kiểm tra tính hợp lệ của dữ liệu trong form
     * @return true nếu dữ liệu hợp lệ, false nếu có lỗi
     */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrev;
    private javax.swing.JButton btnSuaHoaDon;
    private javax.swing.JButton btnTaoHoaDon;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnXoaHoaDon;
    private javax.swing.JButton btnXuatHoaDon;
    private javax.swing.JComboBox<String> cboId_HoaDon;
    private javax.swing.JComboBox<String> cboId_HopDong;
    private javax.swing.JComboBox<String> cboId_NguoiDung;
    private javax.swing.JComboBox<String> cboId_Phong;
    private javax.swing.JComboBox<String> cboTrangThaiThanhToan;
    private javax.swing.ButtonGroup groupThanhToan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTable tblHoaDon;
    private com.toedter.calendar.JDateChooser dateNgayTaoHoaDon;
    // End of variables declaration//GEN-END:variables

    private void fillFormWithUserData(String userIdStr) {
        try {
            if (userIdStr == null || userIdStr.trim().isEmpty()) {
                cboId_Phong.removeAllItems();
                cboId_HopDong.removeAllItems();
                return;
            }
            int userId = Integer.parseInt(userIdStr);
            List<HopDong> contracts = hopDongDAO.findByUserId(userId);

            cboId_Phong.removeAllItems();
            cboId_HopDong.removeAllItems();

            for (HopDong hopDong : contracts) {
                cboId_Phong.addItem(String.valueOf(hopDong.getID_Phong()));
                cboId_HopDong.addItem(String.valueOf(hopDong.getID_HopDong()));
            }

            if (!contracts.isEmpty()) {
                cboId_Phong.setSelectedItem(String.valueOf(contracts.get(0).getID_Phong()));
                cboId_HopDong.setSelectedItem(String.valueOf(contracts.get(0).getID_HopDong()));
            }
        } catch (NumberFormatException e) {
            XDialog.alert("ID người dùng không hợp lệ: " + e.getMessage());
        } catch (Exception e) {
            XDialog.alert("Lỗi khi lấy dữ liệu hợp đồng: " + e.getMessage());
        }
    }

    @Override
    public void init() {
        fillToTable();
        clear();
        cboId_HoaDon.setEnabled(false);
        
        cboId_NguoiDung.addActionListener(e -> {
            String selectedUserId = (String) cboId_NguoiDung.getSelectedItem();
            fillFormWithUserData(selectedUserId);
        });
        
    }

    @Override
    public void open() {
        fillToTable();
    }

    public void setForm(int hoaDonId) {
        try {
            HoaDon hoaDon = dao.findById(hoaDonId);
            if (hoaDon != null) {
                setForm(hoaDon);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void create() {     
        try {
            if (!validateForm()) {
                return;
            }
            
            HoaDon entity = this.getForm();
            if (entity != null) {
                Integer chiNhanhId = dao.getChiNhanhIdByHopDongId(entity.getID_HopDong());
                if (chiNhanhId == null) {
                    XDialog.alert("Mã hợp đồng " + entity.getID_HopDong() + " không tồn tại trong hệ thống!");
                    return;
                }
                
                entity.setID_ChiNhanh(chiNhanhId);
                
                dao.create(entity);
                this.fillToTable();
                this.clear();
                XDialog.alert("Tạo mới hoá đơn thành công!");
            }
        } catch (NumberFormatException e) {
            XDialog.alert("ID Hợp Đồng phải là số nguyên!");
        } catch(Exception e) {
            XDialog.alert("Lỗi khi tạo mới hoá đơn: " + e.getMessage());   
            e.printStackTrace();
        }
    }

    @Override
    public void update() {
        if (!validateForm()) {
            return;
        }
        
        HoaDon entity = getForm();
        if(entity != null) {
            try {
                dao.update(entity);
                fillToTable();
                setEditable(false); 
                XDialog.alert("Cập nhật hoá đơn thành công!");
            }catch(Exception e) {
                XDialog.alert("Cập nhật thất bại! " + e.getMessage());
                e.printStackTrace();
            }         
        }              
    }

    @Override
    public void delete() {
        int selectRow = tblHoaDon.getSelectedRow();
        
        if(selectRow >= 0) {
            try {
                Object value = tblHoaDon.getValueAt(selectRow, 0);
                int hoaDonId = (Integer) value;
                
                if(XDialog.confirm("Bạn có thật sự muốn xoá hóa đơn ID: " + hoaDonId + "?")) {
                    dao.deleteById(hoaDonId);
                    fillToTable();
                    clear();
                    XDialog.alert("Xoá hoá đơn thành công!");
                }
            } catch(Exception e) {
                XDialog.alert("Xoá hoá đơn thất bại: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            XDialog.alert("Vui lòng chọn một hóa đơn để xóa!");
        }    
    }

    @Override
    public void clear() {
        currentHoaDon = null; 
        
        if (cboId_HoaDon.getItemCount() > 0) {
            cboId_HoaDon.setSelectedIndex(0);
        }
        if (cboId_NguoiDung.getItemCount() > 0) {
            cboId_NguoiDung.setSelectedIndex(0);
        }
        if (cboId_Phong.getItemCount() > 0) {
            cboId_Phong.setSelectedIndex(0);
        }
        if (cboId_HopDong.getItemCount() > 0) {
            cboId_HopDong.setSelectedIndex(0);
        }
        if (cboTrangThaiThanhToan.getItemCount() > 0) {
            cboTrangThaiThanhToan.setSelectedIndex(0);
        }
        
        dateNgayTaoHoaDon.setDate(new Date()); 
        
        tblHoaDon.clearSelection();
    }

    @Override
    public void edit() {
        int selectRow = tblHoaDon.getSelectedRow();
        
        if(selectRow >= 0) {
            try {
                Object value = tblHoaDon.getValueAt(selectRow, 0);
                
                int hoaDonId = (Integer) value; 
               
                HoaDon hoadon = dao.findById(hoaDonId);
                
                if(hoadon != null) {
                    setForm(hoadon);
                    setEditable(true); 
                } else {
                    XDialog.alert("Không tìm thấy hoá đơn với ID: " + hoaDonId);              
                }
                    
            } catch(Exception e) {
                e.printStackTrace();
                XDialog.alert("Lỗi khi tải dữ liệu: " + e.getMessage());
            }          
        } else {
            XDialog.alert("Vui lòng chọn một hóa đơn để chỉnh sửa!");
        }
        
    }

    @Override
    public void setEditable(boolean editable) {        
        cboId_NguoiDung.setEnabled(editable);
        cboId_Phong.setEnabled(editable);
        cboId_HopDong.setEnabled(editable);
        cboTrangThaiThanhToan.setEnabled(editable);
        dateNgayTaoHoaDon.setEnabled(editable);
    }

    @Override
    public void fillToTable() {
        try {
            List<HoaDon> hoaDonList = dao.findAll();
            
            DefaultTableModel model = new DefaultTableModel();
            
            String[] columnNames = {
                "ID_HoaDon", "trangThai", "ngayTao", "ID_NguoiDung", "ID_Phong", "ID_HopDong", "ID_ChiNhanh"
            };
            model.setColumnIdentifiers(columnNames);
            
            for (HoaDon hoaDon : hoaDonList) {
                String hoTen = dao.getHoTenByHoaDonId(hoaDon.getID_HoaDon());
                String tenPhong = dao.getTenPhongByHoaDonId(hoaDon.getID_HoaDon());
                String tenChiNhanh = dao.getTenChiNhanhByHoaDonId(hoaDon.getID_HoaDon());
                
                Object[] tableRow = {
                    hoaDon.getID_HoaDon(),
                    hoaDon.getTrangThai() != null ? hoaDon.getTrangThai() : "N/A",
                    hoaDon.getNgayTao() != null ? sdf.format(hoaDon.getNgayTao()) : "N/A",
                    hoaDon.getID_NguoiDung(),
                    hoaDon.getID_Phong(),
                    hoaDon.getID_HopDong(),
                    hoaDon.getID_ChiNhanh(),
                    false
                };
                model.addRow(tableRow);
            }
            
            tblHoaDon.setModel(model);
            tblHoaDon.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải dữ liệu: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void setCheckedAll(boolean checked) {
        try {
            if (tblHoaDon.getColumnCount() > 8) {
                for (int i = 0; i < tblHoaDon.getRowCount(); i++) {
                    tblHoaDon.setValueAt(checked, i, 7);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public void checkAll() {
        this.setCheckedAll(true);    }

    @Override
    public void uncheckAll() {
        
        this.setCheckedAll(false);    
    }

    @Override
    public void deleteCheckedItems() {
        try {
            List<Integer> idsToDelete = new ArrayList<>();
            
            for (int i = 0; i < tblHoaDon.getRowCount(); i++) {
                if (tblHoaDon.getColumnCount() > 8) {
                    Boolean isChecked = (Boolean) tblHoaDon.getValueAt(i, 7);
                    if (isChecked != null && isChecked) {
                        Integer id = (Integer) tblHoaDon.getValueAt(i, 0);
                        idsToDelete.add(id);
                    }
                }
            }
            
            if (idsToDelete.isEmpty()) {
                XDialog.alert("Không có mục nào được chọn để xóa!");
                return;
            }
            
            if (XDialog.confirm("Bạn thực sự muốn xóa " + idsToDelete.size() + " mục đã chọn?")) {
                for (Integer id : idsToDelete) {
                    dao.deleteById(id);
                }
                this.fillToTable();
                this.clear();
                XDialog.alert("Đã xóa " + idsToDelete.size() + " mục thành công!");
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi xóa các mục đã chọn: " + e.getMessage());
            e.printStackTrace();
        }    }

    @Override
    public void moveFirst() {
        this.moveTo(0);     }

    @Override
    public void movePrevious() {
        this.moveTo(tblHoaDon.getSelectedRow() - 1);    }

    @Override
    public void moveNext() {
        this.moveTo(tblHoaDon.getSelectedRow() + 1);    }

    @Override
    public void moveLast() {
        this.moveTo(tblHoaDon.getRowCount() - 1);    }

    @Override
    public void moveTo(int rowIndex) {
    try {
            int rowCount = tblHoaDon.getRowCount();
            if (rowCount == 0) {
                return;
            }
            
            if (rowIndex < 0) {
                index = 0;
            } else if (rowIndex >= rowCount) {
                index = rowCount - 1;
            } else {
                index = rowIndex;
            }
            
            tblHoaDon.setRowSelectionInterval(index, index);
            
            Integer id = (Integer) tblHoaDon.getValueAt(index, 0);
            if (id != null) {
                HoaDon nguoiThue = dao.findById(id);
                if (nguoiThue != null) {
                    setForm(nguoiThue);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }          }
    
    private boolean validateForm() {
        String nguoiDungIdStr = (String) cboId_NguoiDung.getSelectedItem();
        if (nguoiDungIdStr == null || nguoiDungIdStr.trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn người dùng!");
            return false;
        }
        
        String phongIdStr = (String) cboId_Phong.getSelectedItem();
        if (phongIdStr == null || phongIdStr.trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn phòng!");
            return false;
        }
        
        String hopDongIdStr = (String) cboId_HopDong.getSelectedItem();
        if (hopDongIdStr == null || hopDongIdStr.trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn hợp đồng!");
            return false;
        }
        
        String trangThai = (String) cboTrangThaiThanhToan.getSelectedItem();
        if (trangThai == null || trangThai.trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn trạng thái thanh toán!");
            return false;
        }
        
        return true;
    }
}
