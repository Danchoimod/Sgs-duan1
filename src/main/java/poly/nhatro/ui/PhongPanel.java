/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.nhatro.ui;

import java.awt.CardLayout;
import java.awt.Image;
import java.math.BigDecimal;
import poly.nhatro.dao.HopDongDAO;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import poly.nhatro.dao.NguoiThueDAO;
import poly.nhatro.dao.impl.NguoiThueDaoImpl;
import poly.nhatro.dao.ChiNhanhDAO;
import poly.nhatro.dao.PhongDao;
import poly.nhatro.dao.impl.ChiNhanhDAOImpl;
import poly.nhatro.dao.impl.HopDongImpl;
import poly.nhatro.dao.impl.PhongDaoImpl;
import poly.nhatro.entity.ChiNhanh;
import poly.nhatro.entity.Phong;
import poly.nhatro.util.XDialog;

/**
 *
 * @author Phu Pham
 */
public class PhongPanel extends javax.swing.JPanel {

    /**
     * Creates new form PhongPanel
     */
    CardLayout cardLayout;

    public PhongPanel() {
        initComponents();
        this.fillChiNhanh();
        this.fillTable();
        cardLayout = new CardLayout();
        mainPanel.setLayout(cardLayout);
        mainPanel.add(pnlSoLuongO, "SoLuongO");
        mainPanel.add(pnlNguoiO, "NguoiO");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtIdPhong = new javax.swing.JTextField();
        txtGia = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSoPhong = new javax.swing.JTextField();
        rdoConTrong = new javax.swing.JRadioButton();
        rdoDaThue = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMota = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        cboChiNhanh = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        lblHinhAnh = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPhong = new javax.swing.JTable();
        btnRefesh = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        pnlSoLuongO = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbSoLuongNguoiO = new javax.swing.JTable();
        pnlNguoiO = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFix = new javax.swing.JButton();
        btnQuayLai = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbTenNguoiO = new javax.swing.JTable();
        cbxTenNguoiO = new javax.swing.JComboBox<>();

        jTextField1.setText("jTextField1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("Thêm / Cập nhật phòng");

        txtIdPhong.setEnabled(false);

        txtGia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGiaActionPerformed(evt);
            }
        });

        jLabel3.setText("Giá phòng");

        jLabel4.setText("Trạng thái");

        jLabel5.setText("Số phòng");

        buttonGroup1.add(rdoConTrong);
        rdoConTrong.setText("Còn trống");

        buttonGroup1.add(rdoDaThue);
        rdoDaThue.setText("Đã cho thuê");

        jLabel6.setText("Mô tả");

        txtMota.setColumns(20);
        txtMota.setRows(5);
        jScrollPane1.setViewportView(txtMota);

        jLabel7.setText("chi nhánh");

        cboChiNhanh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboChiNhanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChiNhanhActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdPhong)
                    .addComponent(txtGia, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSoPhong)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(rdoConTrong)
                                .addGap(18, 18, 18)
                                .addComponent(rdoDaThue))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(cboChiNhanh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIdPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGia, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoConTrong)
                    .addComponent(rdoDaThue))
                .addGap(12, 12, 12)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSoPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboChiNhanh, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblHinhAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHinhAnhMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHinhAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHinhAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnClear.setText("Nhập mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        tblPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID phòng", "Số phòng", "Giá phòng", "Trạng thái", "chi nhánh", "Mô tả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhongMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblPhong);

        btnRefesh.setText("làm mới");
        btnRefesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefeshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnThem)
                        .addGap(18, 18, 18)
                        .addComponent(btnSua)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoa)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefesh)
                        .addContainerGap(123, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnThem)
                            .addComponent(btnSua)
                            .addComponent(btnXoa)
                            .addComponent(btnClear)
                            .addComponent(btnRefesh)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.setLayout(new java.awt.CardLayout());

        tbSoLuongNguoiO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Số phòng", "Số người ở"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbSoLuongNguoiO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbSoLuongNguoiOMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbSoLuongNguoiO);

        javax.swing.GroupLayout pnlSoLuongOLayout = new javax.swing.GroupLayout(pnlSoLuongO);
        pnlSoLuongO.setLayout(pnlSoLuongOLayout);
        pnlSoLuongOLayout.setHorizontalGroup(
            pnlSoLuongOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
            .addGroup(pnlSoLuongOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE))
        );
        pnlSoLuongOLayout.setVerticalGroup(
            pnlSoLuongOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 765, Short.MAX_VALUE)
            .addGroup(pnlSoLuongOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlSoLuongOLayout.createSequentialGroup()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        mainPanel.add(pnlSoLuongO, "card4");

        jLabel8.setText("Tên người ở: ");

        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnLamMoi.setText("Làm mới");
        btnLamMoi.setEnabled(false);
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnFix.setText("Sửa");
        btnFix.setEnabled(false);
        btnFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFixActionPerformed(evt);
            }
        });

        btnQuayLai.setText("Quay Lại");
        btnQuayLai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuayLaiActionPerformed(evt);
            }
        });

        tbTenNguoiO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Tên người ở"
            }
        ));
        jScrollPane5.setViewportView(tbTenNguoiO);

        cbxTenNguoiO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout pnlNguoiOLayout = new javax.swing.GroupLayout(pnlNguoiO);
        pnlNguoiO.setLayout(pnlNguoiOLayout);
        pnlNguoiOLayout.setHorizontalGroup(
            pnlNguoiOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNguoiOLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNguoiOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNguoiOLayout.createSequentialGroup()
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlNguoiOLayout.createSequentialGroup()
                        .addGroup(pnlNguoiOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLamMoi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNguoiOLayout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnFix, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8)
                            .addComponent(btnQuayLai)
                            .addComponent(cbxTenNguoiO, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23))))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
        );
        pnlNguoiOLayout.setVerticalGroup(
            pnlNguoiOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNguoiOLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnQuayLai)
                .addGap(29, 29, 29)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxTenNguoiO, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlNguoiOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnFix))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNguoiOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnLamMoi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
        );

        mainPanel.add(pnlNguoiO, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtGiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGiaActionPerformed

    }//GEN-LAST:event_txtGiaActionPerformed

    private void lblHinhAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHinhAnhMouseClicked
        this.chooseImage();
    }//GEN-LAST:event_lblHinhAnhMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        this.addPhong();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        this.updatePhong();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        this.deletePhong();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.clearForm();
    }//GEN-LAST:event_btnClearActionPerformed

    private void tblPhongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhongMouseClicked
        tblPhong.getSelectionModel().addListSelectionListener(e -> {
            // Đảm bảo không xử lý khi đang thay đổi nhiều dòng cùng lúc
            if (!e.getValueIsAdjusting()) {
                int selectedRow = tblPhong.getSelectedRow();
                if (selectedRow >= 0 && selectedRow < listPhong.size()) {
                    Phong phong = listPhong.get(selectedRow);
                    setFormData(phong); // đổ dữ liệu lên form
                }
            }
        });

    }//GEN-LAST:event_tblPhongMouseClicked

    private void btnQuayLaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuayLaiActionPerformed
        // TODO add your handling code here:
        cardLayout.show(mainPanel, "SoLuongO");
        hienThiSoLuongNguoiOTheoChiNhanh();
    }//GEN-LAST:event_btnQuayLaiActionPerformed

    private void cboChiNhanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChiNhanhActionPerformed
        // TODO add your handling code here:
        hienThiSoLuongNguoiOTheoChiNhanh();
    }//GEN-LAST:event_cboChiNhanhActionPerformed

    private void tbSoLuongNguoiOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSoLuongNguoiOMouseClicked
        // TODO add your handling code here:
        int row = tbSoLuongNguoiO.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng.");
            return;
        }

        // Lấy mã phòng
        String maPhong = tbSoLuongNguoiO.getValueAt(row, 0).toString();
        soPhongDangChon = maPhong; // nếu bạn cần dùng biến global

        // Hiển thị pnlNguoiO bằng CardLayout
        CardLayout cl = (CardLayout) mainPanel.getLayout(); // mainPanel là panel cha dùng CardLayout
        cl.show(mainPanel, "NguoiO");

        // Gọi các hàm xử lý người ở
        hienThiBangNguoiDangO(maPhong);
        hienThiDanhSachNguoiTheoSoPhong(maPhong);

    }//GEN-LAST:event_tbSoLuongNguoiOMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
// Lấy tên người dùng từ JComboBox và kiểm tra xem có hợp lệ không
        String tenNguoi = cbxTenNguoiO.getSelectedItem() + "";
        if (tenNguoi.isEmpty() || tenNguoi.equals("Chọn người thuê")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn người cần thêm.");
            return;
        }

        // Lấy ID chi nhánh từ JComboBox
        int chiNhanhIndex = cboChiNhanh.getSelectedIndex();
        if (chiNhanhIndex <= 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn chi nhánh.");
            return;
        }
        String tenChiNhanh = cboChiNhanh.getSelectedItem().toString();
        int idChiNhanh = new ChiNhanhDAOImpl().search(tenChiNhanh).get(0).getID_ChiNhanh();

        // Lấy ID người dùng từ tên đã chọn
        int idNguoiDung = nguoiThueDAO.timIdTheoTen(tenNguoi);

        // Kiểm tra xem người này đã là người ký hợp đồng chưa
        if (nguoiThueDAO.laNguoiKyHopDong(tenNguoi, soPhongDangChon)) {
            JOptionPane.showMessageDialog(this, "Người này đã là người ký hợp đồng.");
            return;
        }

        // Thực hiện thêm người dùng vào phòng
        // Gọi phương thức DAO với các tham số chính xác
        if (nguoiThueDAO.themNguoiOChung(idNguoiDung, soPhongDangChon, idChiNhanh)) {
            JOptionPane.showMessageDialog(this, "Thêm người vào phòng thành công!");

            // Cập nhật lại giao diện người dùng
            hienThiBangNguoiDangO(soPhongDangChon); // Cập nhật bảng người đang ở
            hienThiSoLuongNguoiOTheoChiNhanh(); // Cập nhật số lượng người

            // Cập nhật JComboBox để xóa tên người vừa thêm
            hienThiDanhSachNguoiTheoSoPhong(soPhongDangChon);
        } else {
            JOptionPane.showMessageDialog(this, "Thêm người vào phòng thất bại. Vui lòng thử lại.");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Lấy dòng được chọn từ bảng
        int row = tbTenNguoiO.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn người cần xóa.");
            return;
        }

        String tenNguoi = tbTenNguoiO.getValueAt(row, 0).toString();

        // Kiểm tra xem người được chọn có phải là người ký hợp đồng hay không
        if (nguoiThueDAO.laNguoiKyHopDong(tenNguoi, soPhongDangChon)) {
            JOptionPane.showMessageDialog(this, "Không được xóa người đã ký hợp đồng.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn muốn xóa người này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // Lấy ID người dùng và ID chi nhánh
        int idNguoiDung = nguoiThueDAO.timIdTheoTen(tenNguoi);
        int idChiNhanh = new ChiNhanhDAOImpl()
                .search(cboChiNhanh.getSelectedItem().toString()).get(0)
                .getID_ChiNhanh();

        if (nguoiThueDAO.xoaNguoiOChung(idNguoiDung, soPhongDangChon, idChiNhanh)) {
            JOptionPane.showMessageDialog(this, "Xóa thành công.");
            hienThiBangNguoiDangO(soPhongDangChon);
            hienThiSoLuongNguoiOTheoChiNhanh();
            hienThiDanhSachNguoiTheoSoPhong(soPhongDangChon);
        } else {
            JOptionPane.showMessageDialog(this, "Xóa thất bại.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFixActionPerformed

    }//GEN-LAST:event_btnFixActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnRefeshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefeshActionPerformed
        // TODO add your handling code here:
        System.out.println("=== REFRESH BUTTON CLICKED ===");
        refreshAllData();
        System.out.println("=== REFRESH COMPLETED ===");
    }//GEN-LAST:event_btnRefeshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFix;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnQuayLai;
    private javax.swing.JButton btnRefesh;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cboChiNhanh;
    private javax.swing.JComboBox<String> cbxTenNguoiO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblHinhAnh;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel pnlNguoiO;
    private javax.swing.JPanel pnlSoLuongO;
    private javax.swing.JRadioButton rdoConTrong;
    private javax.swing.JRadioButton rdoDaThue;
    private javax.swing.JTable tbSoLuongNguoiO;
    private javax.swing.JTable tbTenNguoiO;
    private javax.swing.JTable tblPhong;
    private javax.swing.JTextField txtGia;
    private javax.swing.JTextField txtIdPhong;
    private javax.swing.JTextArea txtMota;
    private javax.swing.JTextField txtSoPhong;
    // End of variables declaration//GEN-END:variables
    private String soPhongDangChon;
    private NguoiThueDAO nguoiThueDAO = new NguoiThueDaoImpl();
    HopDongDAO hopDongDao = new HopDongImpl();
    PhongDao phongDao = new PhongDaoImpl();
    List<Phong> listPhong = phongDao.findAll();

    ChiNhanhDAO chiNhanhDAO = new ChiNhanhDAOImpl();
    List<ChiNhanh> listChiNhanh = chiNhanhDAO.getAll();

    Map<Integer, ChiNhanh> cacheChiNhanh = new HashMap<>();

    private void fillChiNhanh() {

        cboChiNhanh.removeAllItems();

        cboChiNhanh.addItem("-- Chọn chi nhánh --");

        for (ChiNhanh cn : listChiNhanh) {
            cboChiNhanh.addItem(cn.getTenChiNhanh());
        }
    }

    private void fillTable() {
        DefaultTableModel model = (DefaultTableModel) tblPhong.getModel();
        model.setRowCount(0);

        ChiNhanhDAO chiNhanhDAO = new ChiNhanhDAOImpl();

        for (Phong phong : listPhong) {
            // Lấy tên chi nhánh từ ID_ChiNhanh
            ChiNhanh chiNhanh = cacheChiNhanh.computeIfAbsent(phong.getIdChiNhanh(), id -> chiNhanhDAO.getById(id));
            String tenChiNhanh = chiNhanh != null ? chiNhanh.getTenChiNhanh() : "Không xác định";

            // Hiển thị trạng thái như trong database
            String trangThai = phong.getTrangThai();

            // Thêm dòng vào table
            model.addRow(new Object[]{
                phong.getIdPhong(),
                phong.getSoPhong(),
                phong.getGiaPhong(),
                trangThai,
                tenChiNhanh,
                phong.getMoTa()
            });
        }
    }

    private String imagePath; // Biến lưu đường dẫn ảnh

    private void chooseImage() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn ảnh phòng");
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Image files", "jpg", "jpeg", "png", "gif");
        fileChooser.setFileFilter(filter);

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            imagePath = fileChooser.getSelectedFile().getAbsolutePath();
            displayImage(imagePath);
        }
    }

    private void displayImage(String imagePath) {
        try {
            ImageIcon icon = new ImageIcon(new ImageIcon(imagePath)
                    .getImage().getScaledInstance(
                            lblHinhAnh.getWidth(),
                            lblHinhAnh.getHeight(),
                            Image.SCALE_SMOOTH));
            lblHinhAnh.setIcon(icon);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải ảnh: " + ex.getMessage());
        }
    }

    // Hàm lấy dữ liệu từ form
    private Phong getFormData() {
        Phong phong = new Phong();
        phong.setSoPhong(txtSoPhong.getText().trim());
        phong.setGiaPhong(new BigDecimal(txtGia.getText().trim()));
        
        // Set trạng thái dựa trên radio button
        if (rdoDaThue.isSelected()) {
            phong.setTrangThai("Đang thuê");
        } else {
            phong.setTrangThai("Trống");
        }
        
        phong.setMoTa(txtMota.getText().trim());
        phong.setAnhPhong(imagePath);

        // Lấy ID chi nhánh từ combobox
        String tenChiNhanh = cboChiNhanh.getSelectedItem().toString().trim();
        ChiNhanh chiNhanh = new ChiNhanhDAOImpl().search(tenChiNhanh).get(0);
        phong.setIdChiNhanh(chiNhanh.getID_ChiNhanh());

        return phong;
    }

    // Hàm đổ dữ liệu lên form từ đối tượng Phong
    private void setFormData(Phong phong) {
        txtSoPhong.setText(phong.getSoPhong());
        txtGia.setText(phong.getGiaPhong().toString());
        txtMota.setText(phong.getMoTa());
        txtIdPhong.setText(String.valueOf(phong.getIdPhong())); // fill ID Phòng

        rdoDaThue.setSelected("Đang thuê".equals(phong.getTrangThai()));    // nếu đang thuê
        rdoConTrong.setSelected("Trống".equals(phong.getTrangThai()));  // nếu còn trống
        // Đặt chi nhánh
        ChiNhanh chiNhanh = new ChiNhanhDAOImpl().getById(phong.getIdChiNhanh());
        if (chiNhanh != null) {
            cboChiNhanh.setSelectedItem(chiNhanh.getTenChiNhanh());
        }

        // Hiển thị ảnh
        if (phong.getAnhPhong() != null) {
            imagePath = phong.getAnhPhong();
            displayImage(imagePath);
        }
    }

    // Hàm clear form   
    private void clearForm() {
        txtSoPhong.setText("");
        txtGia.setText("");
        txtMota.setText("");
        cboChiNhanh.setSelectedIndex(0);
        lblHinhAnh.setIcon(null);
        imagePath = null;
        rdoConTrong.setSelected(true);
        txtIdPhong.setText("");
        this.fillTable();
    }

    private boolean validateForm() {
        String soPhong = txtSoPhong.getText().trim();
        String giaStr = txtGia.getText().trim();
        String moTa = txtMota.getText().trim();

        if (soPhong.isEmpty()) {
            XDialog.alert("Vui lòng nhập số phòng", "Lỗi nhập liệu");
            txtSoPhong.requestFocus();
            return false;
        }
        if (soPhong.length() > 10) {
            XDialog.alert("Số phòng không vượt quá 10 ký tự", "Lỗi nhập liệu");
            txtSoPhong.requestFocus();
            return false;
        }

        if (giaStr.isEmpty()) {
            XDialog.alert("Vui lòng nhập giá phòng", "Lỗi nhập liệu");
            txtGia.requestFocus();
            return false;
        }
        try {
            BigDecimal gia = new BigDecimal(giaStr);
            if (gia.compareTo(BigDecimal.ZERO) <= 0) {
                XDialog.alert("Giá phòng phải lớn hơn 0", "Lỗi nhập liệu");
                txtGia.requestFocus();
                return false;
            }
        } catch (NumberFormatException e) {
            XDialog.alert("Giá phòng phải là số hợp lệ", "Lỗi nhập liệu");
            txtGia.requestFocus();
            return false;
        }

        if (cboChiNhanh.getSelectedIndex() <= 0 || cboChiNhanh.getSelectedItem() == null) {
            XDialog.alert("Vui lòng chọn chi nhánh", "Lỗi nhập liệu");
            cboChiNhanh.requestFocus();
            return false;
        }

        if (moTa.isEmpty()) {
            if (!XDialog.confirm("Mô tả đang để trống. Bạn có muốn tiếp tục?")) {
                txtMota.requestFocus();
                return false;
            }
        }

        return true;
    }

    // Hàm thêm phòng
    private void addPhong() {
        if (!validateForm()) {
            return;
        }

        Phong phong = getFormData();
        new PhongDaoImpl().create(phong);
        XDialog.alert("Thêm phòng thành công!");
        clearForm();
        this.fillTable();
    }

    // Hàm sửa phòng
    private void updatePhong() {
        int selectedRow = tblPhong.getSelectedRow();
        if (selectedRow < 0) {
            XDialog.alert("Vui lòng chọn phòng cần sửa");
            return;
        }

        if (!validateForm()) {
            return;
        }

        Phong phong = getFormData();
        phong.setIdPhong((Integer) tblPhong.getValueAt(selectedRow, 0));

        new PhongDaoImpl().update(phong);
        XDialog.alert("Cập nhật phòng thành công!");
        this.fillTable();
    }

    // Hàm xóa phòng
    private void deletePhong() {
        int selectedRow = tblPhong.getSelectedRow();
        if (selectedRow < 0) {
            XDialog.alert("Vui lòng chọn phòng cần xóa");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc chắn muốn xóa phòng này?", "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            int idPhong = (Integer) tblPhong.getValueAt(selectedRow, 0);
            new PhongDaoImpl().deleteById(idPhong);
            XDialog.alert("Xóa phòng thành công!");
            this.fillTable();
        }
    }

    private void hienThiSoLuongNguoiOTheoChiNhanh() {
        DefaultTableModel model = (DefaultTableModel) tbSoLuongNguoiO.getModel();
        model.setRowCount(0);

        int index = cboChiNhanh.getSelectedIndex();
        if (index <= 0) {
            return;
        }

        String tenChiNhanh = cboChiNhanh.getSelectedItem().toString();
        ChiNhanh cn = new ChiNhanhDAOImpl().search(tenChiNhanh).get(0);

        // Lấy danh sách số lượng người ở theo mã chi nhánh
        List<Object[]> danhSach = nguoiThueDAO.laySoLuongNguoiOTheoChiNhanh(cn.getID_ChiNhanh());
        for (Object[] row : danhSach) {
            model.addRow(row); // Ví dụ: row = { "P101", 3 }
        }
    }

    private void hienThiDanhSachNguoiTheoSoPhong(String maPhong) {
        cbxTenNguoiO.removeAllItems();

        int index = cboChiNhanh.getSelectedIndex();
        if (index <= 0) {
            return;
        }

        String tenChiNhanh = cboChiNhanh.getSelectedItem().toString();
        ChiNhanh cn = new ChiNhanhDAOImpl().search(tenChiNhanh).get(0);

        List<Object[]> danhSachNguoiThem = nguoiThueDAO.layDanhSachNguoiChuaO(maPhong, cn.getID_ChiNhanh());
        for (Object[] row : danhSachNguoiThem) {
            cbxTenNguoiO.addItem(row[0].toString());
        }
    }

    public void hienThiBangNguoiDangO(String maPhong) {
        DefaultTableModel model = (DefaultTableModel) tbTenNguoiO.getModel();
        model.setRowCount(0);

        int index = cboChiNhanh.getSelectedIndex();
        if (index <= 0) {
            return;
        }

        String tenChiNhanh = cboChiNhanh.getSelectedItem().toString();
        ChiNhanh cn = new ChiNhanhDAOImpl().search(tenChiNhanh).get(0);

        List<Object[]> danhSachDangO = nguoiThueDAO.layDanhSachNguoiDangO(maPhong, cn.getID_ChiNhanh());
        for (Object[] row : danhSachDangO) {
            model.addRow(row); // Chỉ có tên người dùng
        }
    }
    
    /**
     * Phương thức public để refresh toàn bộ dữ liệu PhongPanel
     * Được gọi từ các panel khác khi có thay đổi dữ liệu
     */
    public void refreshAllData() {
        System.out.println("PhongPanel: Refreshing all data...");
        try {
            // Refresh combo box chi nhánh
            fillChiNhanh();
            
            // Refresh bảng phòng
            fillTable();
            
            // Refresh bảng số lượng người ở
            hienThiSoLuongNguoiOTheoChiNhanh();
            
            System.out.println("PhongPanel: All data refreshed successfully");
        } catch (Exception e) {
            System.err.println("PhongPanel: Error refreshing data - " + e.getMessage());
            e.printStackTrace();
        }
    }

}
