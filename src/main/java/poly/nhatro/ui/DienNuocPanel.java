/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.nhatro.ui;
import poly.nhatro.entity.DienNuoc;
import poly.nhatro.dao.impl.DienNuocDAOImpl;
import poly.nhatro.dao.DienNuocDAO;
import poly.nhatro.dao.ChiNhanhDAO;
import poly.nhatro.dao.impl.ChiNhanhDAOImpl;
import poly.nhatro.entity.ChiNhanh;
import poly.nhatro.dao.impl.PhongDaoImpl;
import poly.nhatro.entity.Phong;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.awt.event.MouseEvent;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileOutputStream;
import java.io.File;
import java.io.IOException;
import javax.swing.table.TableModel;
import java.text.SimpleDateFormat; // Thêm import cho SimpleDateFormat
import java.util.Date; // Thêm import cho Date

public class DienNuocPanel extends javax.swing.JPanel implements dienNuocController {
    private DienNuocDAO dienNuocDao;
    private ChiNhanhDAO chiNhanhDao;
    private PhongDaoImpl phongDao;
    private Map<String, Integer> chiNhanhMap;
    private int currentIndex = -1;
    private List<DienNuoc> currentList;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày tháng

    public DienNuocPanel() {
        initComponents();
        this.dienNuocDao = new DienNuocDAOImpl();
        this.chiNhanhDao = new ChiNhanhDAOImpl();
        this.phongDao = new PhongDaoImpl();
        this.chiNhanhMap = new HashMap<>();
        init();
    }

    @Override
    public void init() {
        loadChiNhanhToComboBox();
        txtDienNuoc.setEditable(false); // ID Điện nước không cho sửa
        filterAndFillTable(); // Gọi phương thức này để lọc và điền dữ liệu ban đầu
        clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        lblHopDong5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSoDienCu = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSoNuocCu = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cboChiNhanh = new javax.swing.JComboBox<>();
        btnLocTheoChiNhanh = new javax.swing.JButton();
        txtMaPhong = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDienNuoc = new javax.swing.JTextField();
        txtSoDienMoi = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtSoNuocMoi = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtThangNam = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDienNuoc = new javax.swing.JTable();
        btnExcel = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        lblHopDong5.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lblHopDong5.setText("Điện nước");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(443, 443, 443)
                .addComponent(lblHopDong5)
                .addContainerGap(530, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHopDong5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Mã phòng");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Số nước cũ");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Số điện cũ");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Chi nhánh");

        cboChiNhanh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboChiNhanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChiNhanhActionPerformed(evt);
            }
        });

        btnLocTheoChiNhanh.setText("Lọc theo chi nhánh");
        btnLocTheoChiNhanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocTheoChiNhanhActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Mã Điện Nước");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Số điện mới");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Số nước mới");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Tháng năm");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboChiNhanh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSoNuocCu)
                            .addComponent(txtMaPhong)
                            .addComponent(txtSoDienCu, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtDienNuoc, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 312, Short.MAX_VALUE)
                        .addComponent(btnLocTheoChiNhanh)
                        .addGap(55, 55, 55))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSoDienMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoNuocMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtThangNam, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboChiNhanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLocTheoChiNhanh)
                    .addComponent(jLabel8)
                    .addComponent(txtDienNuoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txtThangNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSoDienCu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoDienMoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoNuocCu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10)
                    .addComponent(txtSoNuocMoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        tblDienNuoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Chi nhánh", "Mã điện nước", "mã phòng", "Giá điện cũ", "Giá điện mới", "Giá nước cũ", "Giá nước mới", "Tháng năm"
            }
        ));
        tblDienNuoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDienNuocMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDienNuoc);

        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnThem)
                        .addGap(18, 18, 18)
                        .addComponent(btnSua)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLamMoi)
                        .addGap(137, 137, 137))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem)
                    .addComponent(btnSua)
                    .addComponent(btnXoa)
                    .addComponent(btnLamMoi)
                    .addComponent(btnExcel))
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnLocTheoChiNhanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocTheoChiNhanhActionPerformed
        filterAndFillTable();
    }//GEN-LAST:event_btnLocTheoChiNhanhActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        this.update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        this.Excel();
    }//GEN-LAST:event_btnExcelActionPerformed

    private void tblDienNuocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDienNuocMouseClicked
        if (evt.getClickCount() == 1) { // Chỉ xử lý khi là một click đơn
            edit(); // Gọi phương thức edit() để hiển thị dữ liệu lên form
        }
    }//GEN-LAST:event_tblDienNuocMouseClicked

    private void cboChiNhanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChiNhanhActionPerformed
        // TODO add your handling code here:
     
    }//GEN-LAST:event_cboChiNhanhActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnLocTheoChiNhanh;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboChiNhanh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHopDong5;
    private javax.swing.JTable tblDienNuoc;
    private javax.swing.JTextField txtDienNuoc;
    private javax.swing.JTextField txtMaPhong;
    private javax.swing.JTextField txtSoDienCu;
    private javax.swing.JTextField txtSoDienMoi;
    private javax.swing.JTextField txtSoNuocCu;
    private javax.swing.JTextField txtSoNuocMoi;
    private javax.swing.JTextField txtThangNam;
    // End of variables declaration//GEN-END:variables

   @Override
    public void open() {
// Method can be used to open panel, no specific logic needed here
    }

    @Override
    public void setForm(DienNuoc entity) {
        if (entity != null) {
            txtDienNuoc.setText(String.valueOf(entity.getIdDienNuoc()));
            if (entity.getTenChiNhanh() != null) {
                cboChiNhanh.setSelectedItem(entity.getTenChiNhanh());
            } else {
                cboChiNhanh.setSelectedIndex(0);
            }
            if (entity.getSoPhong() != null) {
                txtMaPhong.setText(entity.getSoPhong());
            } else {
                txtMaPhong.setText("");
            }
            txtSoDienCu.setText(String.valueOf(entity.getSoDienCu())); // Đã sửa
            txtSoDienMoi.setText(String.valueOf(entity.getSoDienMoi())); // Thêm
            txtSoNuocCu.setText(String.valueOf(entity.getSoNuocCu()));   // Đã sửa
            txtSoNuocMoi.setText(String.valueOf(entity.getSoNuocMoi())); // Thêm
            if (entity.getThangNam() != null) {
                txtThangNam.setText(dateFormat.format(entity.getThangNam())); // Thêm định dạng ngày tháng
            } else {
                txtThangNam.setText("");
            }
        } else {
            clear();
        }
    }

    public boolean validateForm() {
        if (cboChiNhanh.getSelectedItem() == null || cboChiNhanh.getSelectedItem().equals("Tất cả")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một Chi nhánh hợp lệ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            cboChiNhanh.requestFocusInWindow();
            return false;
        }
        if (txtMaPhong.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mã phòng không được để trống.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtMaPhong.requestFocusInWindow();
            return false;
        }
        try {
            Integer idPhong = dienNuocDao.findPhongIdBySoPhong(txtMaPhong.getText());
            if (idPhong == null) {
                JOptionPane.showMessageDialog(this, "Mã phòng không tồn tại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtMaPhong.requestFocusInWindow();
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi kiểm tra Mã phòng: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return false;
        }
        
        // Validate soDienCu
        if (txtSoDienCu.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số điện cũ không được để trống.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoDienCu.requestFocusInWindow();
            return false;
        }
        try {
            int soDienCu = Integer.parseInt(txtSoDienCu.getText());
            if (soDienCu < 0) {
                JOptionPane.showMessageDialog(this, "Số điện cũ phải là số nguyên không âm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtSoDienCu.requestFocusInWindow();
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số điện cũ phải là một số nguyên hợp lệ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoDienCu.requestFocusInWindow();
            return false;
        }

        // Validate soDienMoi
        if (txtSoDienMoi.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số điện mới không được để trống.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoDienMoi.requestFocusInWindow();
            return false;
        }
        try {
            int soDienMoi = Integer.parseInt(txtSoDienMoi.getText());
            if (soDienMoi < 0) {
                JOptionPane.showMessageDialog(this, "Số điện mới phải là số nguyên không âm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtSoDienMoi.requestFocusInWindow();
                return false;
            }
            // Thêm kiểm tra soDienMoi >= soDienCu
            if (Integer.parseInt(txtSoDienCu.getText()) > soDienMoi) {
                JOptionPane.showMessageDialog(this, "Số điện mới phải lớn hơn hoặc bằng số điện cũ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtSoDienMoi.requestFocusInWindow();
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số điện mới phải là một số nguyên hợp lệ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoDienMoi.requestFocusInWindow();
            return false;
        }

        // Validate soNuocCu
        if (txtSoNuocCu.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số nước cũ không được để trống.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoNuocCu.requestFocusInWindow();
            return false;
        }
        try {
            int soNuocCu = Integer.parseInt(txtSoNuocCu.getText());
            if (soNuocCu < 0) {
                JOptionPane.showMessageDialog(this, "Số nước cũ phải là số nguyên không âm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtSoNuocCu.requestFocusInWindow();
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số nước cũ phải là một số nguyên hợp lệ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoNuocCu.requestFocusInWindow();
            return false;
        }

        // Validate soNuocMoi
        if (txtSoNuocMoi.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số nước mới không được để trống.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoNuocMoi.requestFocusInWindow();
            return false;
        }
        try {
            int soNuocMoi = Integer.parseInt(txtSoNuocMoi.getText());
            if (soNuocMoi < 0) {
                JOptionPane.showMessageDialog(this, "Số nước mới phải là số nguyên không âm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtSoNuocMoi.requestFocusInWindow();
                return false;
            }
            // Thêm kiểm tra soNuocMoi >= soNuocCu
            if (Integer.parseInt(txtSoNuocCu.getText()) > soNuocMoi) {
                JOptionPane.showMessageDialog(this, "Số nước mới phải lớn hơn hoặc bằng số nước cũ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtSoNuocMoi.requestFocusInWindow();
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số nước mới phải là một số nguyên hợp lệ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtSoNuocMoi.requestFocusInWindow();
            return false;
        }

        // Validate thangNam
        if (txtThangNam.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tháng năm không được để trống.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtThangNam.requestFocusInWindow();
            return false;
        }
        try {
            dateFormat.parse(txtThangNam.getText());
        } catch (java.text.ParseException e) {
            JOptionPane.showMessageDialog(this, "Tháng năm không hợp lệ. Vui lòng nhập theo định dạng YYYY-MM-DD.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtThangNam.requestFocusInWindow();
            return false;
        }

        return true;
    }

    @Override
    public DienNuoc getForm() {
        if (!validateForm()) {
            return null;
        }
        DienNuoc dienNuoc = new DienNuoc();
        // Giữ lại ID_DienNuoc nếu đang ở chế độ sửa
        if (currentIndex >= 0 && currentIndex < currentList.size()) {
            dienNuoc.setIdDienNuoc(currentList.get(currentIndex).getIdDienNuoc());
        }

        String soPhongText = txtMaPhong.getText();
        Integer idPhong = null;
        if (soPhongText != null && !soPhongText.isEmpty()) {
            try {
                idPhong = dienNuocDao.findPhongIdBySoPhong(soPhongText);
                if (idPhong == null) {
                    JOptionPane.showMessageDialog(this, "Mã phòng không hợp lệ hoặc không tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tra cứu mã phòng: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return null;
            }
        } else {
            return null;
        }
        dienNuoc.setIdPhong(idPhong);

        try {
            dienNuoc.setSoDienCu(Integer.parseInt(txtSoDienCu.getText()));     // Đã sửa
            dienNuoc.setSoDienMoi(Integer.parseInt(txtSoDienMoi.getText()));   // Thêm
            dienNuoc.setSoNuocCu(Integer.parseInt(txtSoNuocCu.getText()));     // Đã sửa
            dienNuoc.setSoNuocMoi(Integer.parseInt(txtSoNuocMoi.getText()));   // Thêm
            dienNuoc.setThangNam(dateFormat.parse(txtThangNam.getText()));     // Thêm
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số điện hoặc số nước không hợp lệ. Vui lòng nhập số nguyên.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return null;
        } catch (java.text.ParseException e) {
            JOptionPane.showMessageDialog(this, "Tháng năm không hợp lệ. Vui lòng nhập theo định dạng YYYY-MM-DD.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return null;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy dữ liệu từ form: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return null;
        }
        return dienNuoc;
    }

    @Override
    public void create() {
        if (!validateForm()) {
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn thêm mới bản ghi này?", "Xác nhận thêm mới", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            DienNuoc newDienNuoc = getForm();
            if (newDienNuoc == null) {
                return;
            }
            try {
                // Kiểm tra xem đã tồn tại bản ghi điện nước cho phòng và tháng năm này chưa
                DienNuoc existingDienNuoc = dienNuocDao.findByPhongThangNam(newDienNuoc.getIdPhong(), 
                                                                              newDienNuoc.getThangNam().getMonth() + 1, // Calendar month is 0-indexed
                                                                              newDienNuoc.getThangNam().getYear() + 1900); // Year is 1900-indexed
                if (existingDienNuoc != null) {
                    JOptionPane.showMessageDialog(this, "Đã tồn tại bản ghi điện nước cho phòng này trong tháng và năm đã chọn.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                dienNuocDao.create(newDienNuoc);
                JOptionPane.showMessageDialog(this, "Thêm mới thành công!");
                filterAndFillTable(); // Cập nhật lại bảng sau khi thêm
                clear();
            } catch (RuntimeException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi thêm mới: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi không xác định khi thêm mới: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    @Override
    public void update() {
        if (currentIndex < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một bản ghi để cập nhật.");
            return;
        }
        if (!validateForm()) {
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn cập nhật bản ghi này?", "Xác nhận cập nhật", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            DienNuoc updatedDienNuoc = getForm();
            if (updatedDienNuoc == null) {
                return;
            }
            try {
                updatedDienNuoc.setIdDienNuoc(currentList.get(currentIndex).getIdDienNuoc()); // Đảm bảo ID đúng
                
                // Kiểm tra trùng lặp tháng năm và phòng, nhưng bỏ qua bản ghi hiện tại đang sửa
                DienNuoc existingDienNuoc = dienNuocDao.findByPhongThangNam(updatedDienNuoc.getIdPhong(), 
                                                                              updatedDienNuoc.getThangNam().getMonth() + 1, 
                                                                              updatedDienNuoc.getThangNam().getYear() + 1900);
                if (existingDienNuoc != null && existingDienNuoc.getIdDienNuoc() != updatedDienNuoc.getIdDienNuoc()) {
                    JOptionPane.showMessageDialog(this, "Đã tồn tại bản ghi điện nước cho phòng này trong tháng và năm đã chọn.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                dienNuocDao.update(updatedDienNuoc);
                JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
                filterAndFillTable(); // Cập nhật lại bảng sau khi sửa
                clear();
            } catch (RuntimeException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi không xác định khi cập nhật: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    @Override
    public void delete() {
        if (currentIndex < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một bản ghi để xóa.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa bản ghi này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                int dienNuocIdToDelete = currentList.get(currentIndex).getIdDienNuoc();
                dienNuocDao.deleteById(dienNuocIdToDelete);
                JOptionPane.showMessageDialog(this, "Xóa thành công!");
                filterAndFillTable(); // Cập nhật lại bảng sau khi xóa
                clear();
            } catch (RuntimeException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xóa: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi không xác định khi xóa: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    @Override
    public void clear() {
        cboChiNhanh.setSelectedIndex(0);
        txtSoDienCu.setText("");
        txtSoDienMoi.setText(""); // Thêm
        txtSoNuocCu.setText("");
        txtSoNuocMoi.setText(""); // Thêm
        txtDienNuoc.setText("");
        txtMaPhong.setText("");
        txtThangNam.setText(""); // Thêm
        currentIndex = -1;
        setEditable(true);
        txtDienNuoc.setEditable(false); // Đảm bảo ID không sửa được
    }

    @Override
    public void edit() {
        int selectedRow = tblDienNuoc.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < currentList.size()) {
            currentIndex = selectedRow;
            DienNuoc selectedDienNuoc = currentList.get(selectedRow);
            setForm(selectedDienNuoc);
            setEditable(true);
            txtDienNuoc.setEditable(false); // Mã điện nước thường không được sửa
        } else {
            clear();
        }
    }

    @Override
    public void setEditable(boolean editable) {
        txtMaPhong.setEditable(editable);
        txtSoDienCu.setEditable(editable);
        txtSoDienMoi.setEditable(editable); // Thêm
        txtSoNuocCu.setEditable(editable);
        txtSoNuocMoi.setEditable(editable); // Thêm
        txtThangNam.setEditable(editable); // Thêm
        cboChiNhanh.setEnabled(editable);
        btnThem.setEnabled(editable);
        btnSua.setEnabled(editable);
        btnXoa.setEnabled(editable);
        txtDienNuoc.setEditable(false); // Mã điện nước không cho sửa
    }

    // Phương thức mới để vừa lọc vừa điền dữ liệu vào bảng
    public void filterAndFillTable() {
        DefaultTableModel model = (DefaultTableModel) tblDienNuoc.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng hiện có
        String selectedChiNhanhName = (String) cboChiNhanh.getSelectedItem();
        try {
            List<DienNuoc> filteredList;
            if (selectedChiNhanhName == null || selectedChiNhanhName.equals("Tất cả")) {
                filteredList = dienNuocDao.findAll(); // Lấy tất cả nếu chọn "Tất cả"
            } else {
                Integer idChiNhanh = chiNhanhMap.get(selectedChiNhanhName);
                if (idChiNhanh != null) {
                    filteredList = dienNuocDao.findByChiNhanhId(idChiNhanh); // Lọc theo ID chi nhánh
                } else {
                    // Trường hợp không tìm thấy ID chi nhánh (có thể xảy ra nếu dữ liệu bị lỗi)
                    filteredList = new ArrayList<>(); // Trả về danh sách rỗng
                    JOptionPane.showMessageDialog(this, "Không tìm thấy ID cho chi nhánh đã chọn: " + selectedChiNhanhName, "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
            currentList = filteredList; // Cập nhật currentList

            // --- BẮT ĐẦU ĐOẠN MÃ DEBUG ---
            System.out.println("--- DEBUG: Kiểm tra giá trị ID_DienNuoc từ currentList sau khi lọc ---");
            if (currentList != null) {
                for (DienNuoc dn : currentList) {
                    System.out.println(" ID_DienNuoc: " + dn.getIdDienNuoc() + 
                                       ", SoDienCu: " + dn.getSoDienCu() + 
                                       ", SoDienMoi: " + dn.getSoDienMoi() +
                                       ", SoNuocCu: " + dn.getSoNuocCu() + 
                                       ", SoNuocMoi: " + dn.getSoNuocMoi() +
                                       ", ThangNam: " + (dn.getThangNam() != null ? dateFormat.format(dn.getThangNam()) : "N/A") +
                                       ", MaPhong: " + dn.getSoPhong() + 
                                       ", TenChiNhanh: " + dn.getTenChiNhanh());
                }
            } else {
                System.out.println(" currentList is null or empty.");
            }
            System.out.println("--- KẾT THÚC ĐOẠN MÃ DEBUG ---");

            // Điền dữ liệu vào bảng từ currentList đã lọc
            for (DienNuoc dn : currentList) {
                Object[] row = {
                    dn.getTenChiNhanh(),
                    dn.getIdDienNuoc(),
                    dn.getSoPhong(),
                    dn.getSoDienCu(),
                    dn.getSoDienMoi(),
                    dn.getSoNuocCu(),
                    dn.getSoNuocMoi(),
                    dn.getThangNam() != null ? dateFormat.format(dn.getThangNam()) : "" // Định dạng ngày tháng
                };
                model.addRow(row);
            }
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lọc và tải dữ liệu vào bảng: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi không xác định khi lọc và tải dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    // fillToTable giờ chỉ gọi filterAndFillTable()
    @Override
    public void fillToTable() {
        filterAndFillTable();
    }

    private void loadChiNhanhToComboBox() {
        cboChiNhanh.removeAllItems();
        cboChiNhanh.addItem("Tất cả");
        chiNhanhMap.clear();
        try {
            List<ChiNhanh> chiNhanhs = chiNhanhDao.getAll();
            for (ChiNhanh cn : chiNhanhs) {
                cboChiNhanh.addItem(cn.getTenChiNhanh());
                chiNhanhMap.put(cn.getTenChiNhanh(), cn.getID_ChiNhanh());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách chi nhánh: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    @Override
    public void checkAll() {
        tblDienNuoc.selectAll();
    }

    @Override
    public void uncheckAll() {
        tblDienNuoc.clearSelection();
    }

    @Override
    public void deleteCheckedItems() {
        int[] selectedRows = tblDienNuoc.getSelectedRows();
        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một bản ghi để xóa.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa " + selectedRows.length + " bản ghi đã chọn?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Xóa từ dưới lên để tránh lỗi index khi xóa
                for (int i = selectedRows.length - 1; i >= 0; i--) {
                    int modelRow = tblDienNuoc.convertRowIndexToModel(selectedRows[i]);
                    int dienNuocIdToDelete = currentList.get(modelRow).getIdDienNuoc();
                    dienNuocDao.deleteById(dienNuocIdToDelete);
                }
                JOptionPane.showMessageDialog(this, "Đã xóa các bản ghi đã chọn thành công!");
                filterAndFillTable(); // Cập nhật lại bảng sau khi xóa
                clear();
            } catch (RuntimeException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xóa các bản ghi đã chọn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi không xác định khi xóa các bản ghi đã chọn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    @Override
    public void moveFirst() {
        if (!currentList.isEmpty()) {
            currentIndex = 0;
            tblDienNuoc.setRowSelectionInterval(currentIndex, currentIndex);
            setForm(currentList.get(currentIndex));
        }
    }

    @Override
    public void movePrevious() {
        if (!currentList.isEmpty() && currentIndex > 0) {
            currentIndex--;
            tblDienNuoc.setRowSelectionInterval(currentIndex, currentIndex);
            setForm(currentList.get(currentIndex));
        }
    }

    @Override
    public void moveNext() {
        if (!currentList.isEmpty() && currentIndex < currentList.size() - 1) {
            currentIndex++;
            tblDienNuoc.setRowSelectionInterval(currentIndex, currentIndex);
            setForm(currentList.get(currentIndex));
        }
    }

    @Override
    public void moveLast() {
        if (!currentList.isEmpty()) {
            currentIndex = currentList.size() - 1;
            tblDienNuoc.setRowSelectionInterval(currentIndex, currentIndex);
            setForm(currentList.get(currentIndex));
        }
    }

    @Override
    public void moveTo(int rowIndex) {
        if (rowIndex >= 0 && rowIndex < currentList.size()) {
            currentIndex = rowIndex;
            tblDienNuoc.setRowSelectionInterval(currentIndex, currentIndex);
            setForm(currentList.get(currentIndex));
        }
    }

    private void Excel() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Lưu file Excel");
        fileChooser.setSelectedFile(new File("DuLieuDienNuoc.xlsx"));
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            if (!fileToSave.getAbsolutePath().toLowerCase().endsWith(".xlsx")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".xlsx");
            }
            try (Workbook workbook = new XSSFWorkbook(); FileOutputStream fileOut = new FileOutputStream(fileToSave)) {
                Sheet sheet = workbook.createSheet("Dữ liệu Điện Nước");
                DefaultTableModel model = (DefaultTableModel) tblDienNuoc.getModel();
                Row headerRow = sheet.createRow(0);
                for (int i = 0; i < model.getColumnCount(); i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(model.getColumnName(i));
                }
                for (int r = 0; r < model.getRowCount(); r++) {
                    Row dataRow = sheet.createRow(r + 1);
                    for (int c = 0; c < model.getColumnCount(); c++) {
                        Cell cell = dataRow.createCell(c);
                        Object value = model.getValueAt(r, c);
                        if (value != null) {
                            if (value instanceof String) {
                                cell.setCellValue((String) value);
                            } else if (value instanceof Number) {
                                cell.setCellValue(((Number) value).doubleValue());
                            } else {
                                cell.setCellValue(value.toString());
                            }
                        } else {
                            cell.setCellValue("");
                        }
                    }
                }
                workbook.write(fileOut);
                JOptionPane.showMessageDialog(this, "Xuất file Excel thành công!\nĐường dẫn: " + fileToSave.getAbsolutePath(), "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xuất file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }
}
