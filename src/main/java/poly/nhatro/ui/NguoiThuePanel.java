package poly.nhatro.ui;

import poly.nhatro.entity.NguoiThue;
import java.util.List;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;
import poly.nhatro.dao.NguoiThueDAO;
import poly.nhatro.dao.impl.NguoiThueDaoImpl;
import poly.nhatro.util.XDialog;


/**
 *
 * @author Phu Pham
 */
public class NguoiThuePanel extends javax.swing.JPanel implements NguoiThueController {

    private String selectedId = null;

    /**
     * Creates new form NguoiThuePanel
     */
    public NguoiThuePanel() {
        initComponents();
        init(); // Load dữ liệu ban đầu
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupThanhToan = new javax.swing.ButtonGroup();
        groupGioiTinh = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnlMain = new poly.nhatro.util.RoundedPanel(30); ;
        jLabel1 = new javax.swing.JLabel();
        txtHoTen = new poly.nhatro.util.RoundedTextField(20); ;
        jLabel2 = new javax.swing.JLabel();
        txtMatKhau = new poly.nhatro.util.RoundedTextField(20); ;
        jLabel3 = new javax.swing.JLabel();
        txtEmail = new poly.nhatro.util.RoundedTextField(20); ;
        jLabel4 = new javax.swing.JLabel();
        txtSDT = new poly.nhatro.util.RoundedTextField(20); ;
        jLabel5 = new javax.swing.JLabel();
        txtSoCCCD = new poly.nhatro.util.RoundedTextField(20); ;
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rdoNam = new javax.swing.JRadioButton();
        rdoDaThanhToan = new javax.swing.JRadioButton();
        rdoChuaThanhToan = new javax.swing.JRadioButton();
        rdoNu = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        txtQueQuan = new poly.nhatro.util.RoundedTextField(20); ;
        jLabel9 = new javax.swing.JLabel();
        txtNgaySinh = new poly.nhatro.util.RoundedTextField(20); ;
        jLabel10 = new javax.swing.JLabel();
        txtPhong = new poly.nhatro.util.RoundedTextField(20); ;
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNguoiThue = new javax.swing.JTable();
        btnClear = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/clear.svg", 24, 24));
        btnDelete = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/delete.svg", 24, 24));
        btnUpdate = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/edit.svg", 24, 24));
        btnAdd = new javax.swing.JButton(new com.formdev.flatlaf.extras.FlatSVGIcon("icons/newfile.svg", 24, 24));
        jLabel11 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        pnlMain.setBackground(new java.awt.Color(153, 212, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel1.setText("Họ và tên:");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel2.setText("Mật khẩu");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel3.setText("Email");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel4.setText("Số điện thoại");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel5.setText("Số CCCD");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel6.setText("Trạng thái thanh toán");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel7.setText("Giới tính");

        groupGioiTinh.add(rdoNam);
        rdoNam.setText("Nam");

        groupThanhToan.add(rdoDaThanhToan);
        rdoDaThanhToan.setText("Đã thanh toán");

        groupThanhToan.add(rdoChuaThanhToan);
        rdoChuaThanhToan.setText("Chưa thanh toán");

        groupGioiTinh.add(rdoNu);
        rdoNu.setText("Nữ");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel8.setText("Quê quán");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel9.setText("Ngày sinh");

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel10.setText("ID_Phòng");

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(txtHoTen)
                    .addComponent(txtMatKhau)
                    .addComponent(txtEmail)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel7))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(rdoNam))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdoNu))
                            .addComponent(txtSoCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQueQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(rdoDaThanhToan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdoChuaThanhToan)))
                .addGap(78, 78, 78)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel10))
                    .addComponent(txtNgaySinh)
                    .addComponent(txtPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdoDaThanhToan)
                    .addComponent(rdoChuaThanhToan)
                    .addComponent(txtPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdoNam)
                    .addComponent(rdoNu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQueQuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        tblNguoiThue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Người Dùng", "Họ và tên", "Mật khẩu", "Email", "Số điện thoại", "Số CCCD", "Trạng thái thanh toán", "Giới tính", "Quê quán", "Ngày sinh", "ID_Phòng"
            }
        ));
        tblNguoiThue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNguoiThueMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNguoiThue);

        btnClear.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnDelete.setText("Xoá người dùng");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnUpdate.setText("Sửa người dùng");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnAdd.setText("Thêm người dùng");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 3, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 153));
        jLabel11.setText("Quản Lý Người Thuê");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jLabel11))
                    .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedId != null && !selectedId.isEmpty()) {
            this.update();
        } else {
            this.edit();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        this.create();
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblNguoiThueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNguoiThueMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) { 
            edit();
        }
    }//GEN-LAST:event_tblNguoiThueMouseClicked
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup groupGioiTinh;
    private javax.swing.ButtonGroup groupThanhToan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JRadioButton rdoChuaThanhToan;
    private javax.swing.JRadioButton rdoDaThanhToan;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JTable tblNguoiThue;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMatKhau;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtPhong;
    private javax.swing.JTextField txtQueQuan;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSoCCCD;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Đặt dữ liệu từ entity NguoiThue vào form
     * @param nguoiThue Entity NguoiThue cần hiển thị, null để clear form
     */
    public void setForm(NguoiThue nguoiThue) {
        if (nguoiThue == null) {
            clearForm();
            return;
        }
        
        try {
            txtHoTen.setText(nguoiThue.getHoVaTen() != null ? nguoiThue.getHoVaTen() : "");
            txtSDT.setText(nguoiThue.getSdt() != null ? nguoiThue.getSdt() : "");
            txtSoCCCD.setText(nguoiThue.getSoCCCD() != null ? nguoiThue.getSoCCCD() : "");
            txtEmail.setText(nguoiThue.getEmail() != null ? nguoiThue.getEmail() : "");
            txtMatKhau.setText(nguoiThue.getMatKhau() != null ? nguoiThue.getMatKhau() : "");
            txtQueQuan.setText(nguoiThue.getQueQuan() != null ? nguoiThue.getQueQuan() : "");
            txtPhong.setText(nguoiThue.getID_Phong() != null ? nguoiThue.getID_Phong().toString() : "");           
            if (nguoiThue.getNgaySinh() != null) {
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                txtNgaySinh.setText(dateFormat.format(nguoiThue.getNgaySinh()));
            } else {
                txtNgaySinh.setText("");
            }           
            rdoDaThanhToan.setSelected(nguoiThue.isTrangThai());
            rdoChuaThanhToan.setSelected(!nguoiThue.isTrangThai());           
            rdoNam.setSelected(nguoiThue.isGioiTinh());
            rdoNu.setSelected(!nguoiThue.isGioiTinh());
            
            selectedId = String.valueOf(nguoiThue.getID_NguoiDung());
            
            btnAdd.setEnabled(false);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            btnClear.setEnabled(true);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Lấy dữ liệu từ form để tạo entity NguoiThue
     * @return NguoiThue entity hoặc null nếu có lỗi
     */
    public NguoiThue getForm() {
        try {
            NguoiThue nguoiThue = new NguoiThue();
            
            nguoiThue.setHoVaTen(txtHoTen.getText().trim());
            nguoiThue.setSdt(txtSDT.getText().trim());
            nguoiThue.setSoCCCD(txtSoCCCD.getText().trim());
            nguoiThue.setEmail(txtEmail.getText().trim());
            nguoiThue.setMatKhau(txtMatKhau.getText().trim());          
            nguoiThue.setQueQuan(txtQueQuan.getText().trim());
           
            String ngaySinhText = txtNgaySinh.getText().trim();
            if (!ngaySinhText.isEmpty()) {
                try {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    dateFormat.setLenient(false);
                    nguoiThue.setNgaySinh(dateFormat.parse(ngaySinhText));
                } catch (Exception e) {
                    nguoiThue.setNgaySinh(null);
                }
            } else {
                nguoiThue.setNgaySinh(null);
            }
            
            // Xử lý ID Phòng
            String idPhongText = txtPhong.getText().trim();
            if (!idPhongText.isEmpty()) {
                try {
                    nguoiThue.setID_Phong(Integer.parseInt(idPhongText));
                } catch (NumberFormatException e) {
                    nguoiThue.setID_Phong(null);
                }
            } else {
                nguoiThue.setID_Phong(null);
            }
            
            if (selectedId != null && !selectedId.isEmpty()) {
                nguoiThue.setID_NguoiDung(Integer.parseInt(selectedId));
            }
            
            // Xử lý trạng thái thanh toán
            nguoiThue.setTrangThai(rdoDaThanhToan.isSelected());
            
            // Xử lý giới tính (Nam = true, Nữ = false)
            nguoiThue.setGioiTinh(rdoNam.isSelected());
            
            return nguoiThue;
            
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * Xóa tất cả dữ liệu trên form
     */
    public void clearForm() {
        txtHoTen.setText("");
        txtSDT.setText("");
        txtSoCCCD.setText("");
        txtEmail.setText("");
        txtMatKhau.setText("");
        txtQueQuan.setText("");
        txtNgaySinh.setText("");
        txtPhong.setText("");
        
        selectedId = null;
        
        btnAdd.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }
    
    /**
    * Validate dữ liệu form trước khi submit
    * @return true nếu dữ liệu hợp lệ
    */
    public boolean validateForm() {
        if (txtHoTen.getText().trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Họ và tên không được để trống!",
                "Lỗi validation",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtHoTen.requestFocus();
            return false;
        }

        String sdt = txtSDT.getText().trim();
        if (sdt.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Số điện thoại không được để trống!",
                "Lỗi validation",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtSDT.requestFocus();
            return false;
        }

        if (!sdt.matches("^[0-9]{10,11}$")) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Số điện thoại phải có 10-11 chữ số!\nVí dụ: 0901234567 hoặc 84901234567",
                "Lỗi validation",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtSDT.requestFocus();
            return false;
        }

        List<NguoiThue> allNguoiThue = dao.findAll();
        for (NguoiThue nt : allNguoiThue) {
            if (nt.getSdt() != null && nt.getSdt().equals(sdt)) {
                if (selectedId != null && nt.getID_NguoiDung() == Integer.parseInt(selectedId)) {
                    continue;
                }
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Số điện thoại đã tồn tại!",
                    "Lỗi validation",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                txtSDT.requestFocus();
                return false;
            }
        }

        String cccd = txtSoCCCD.getText().trim();
        if (cccd.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Số CCCD không được để trống!",
                "Lỗi validation",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtSoCCCD.requestFocus();
            return false;
        }

        if (!cccd.matches("^[0-9]{12}$")) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Số CCCD phải có 12 chữ số!\nVí dụ: 123456789012",
                "Lỗi validation",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtSoCCCD.requestFocus();
            return false;
        }

        for (NguoiThue nt : allNguoiThue) {
            if (nt.getSoCCCD() != null && nt.getSoCCCD().equals(cccd)) {
                if (selectedId != null && nt.getID_NguoiDung() == Integer.parseInt(selectedId)) {
                    continue;
                }
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Số CCCD đã tồn tại!",
                    "Lỗi validation",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                txtSoCCCD.requestFocus();
                return false;
            }
        }

        String email = txtEmail.getText().trim();
        if (!email.isEmpty() && !email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$")) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Định dạng email không hợp lệ!\nVí dụ: nguyenvana@gmail.com",
                "Lỗi validation",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtEmail.requestFocus();
            return false;
        }

        String ngaySinhText = txtNgaySinh.getText().trim();
        if (!ngaySinhText.isEmpty()) {
            try {
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                dateFormat.setLenient(false);
                dateFormat.parse(ngaySinhText);
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Ngày sinh không đúng định dạng (dd/MM/yyyy)!\nVí dụ: 25/12/1990",
                    "Lỗi validation",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                txtNgaySinh.requestFocus();
                return false;
            }
        }

        String idPhongText = txtPhong.getText().trim();
        if (!idPhongText.isEmpty()) {
            try {
                int idPhong = Integer.parseInt(idPhongText);
                for (NguoiThue nt : allNguoiThue) {
                    if (nt.getID_Phong() != null && nt.getID_Phong() == idPhong) {
                        if (selectedId != null && nt.getID_NguoiDung() == Integer.parseInt(selectedId)) {
                            continue;
                        }
                        javax.swing.JOptionPane.showMessageDialog(this,
                            "Phòng đã có người thuê!",
                            "Lỗi validation",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        txtPhong.requestFocus();
                        return false;
                    }
                }
            } catch (NumberFormatException e) {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "ID Phòng phải là số!",
                    "Lỗi validation",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                txtPhong.requestFocus();
                return false;
            }
        }

        return true;
    }
    
    private final NguoiThueDAO dao = new NguoiThueDaoImpl();
    /**
     * Hiển thị danh sách NguoiThue lên bảng (đơn giản hóa theo mẫu HoaDonPanel.fillToTable)
     * Lấy dữ liệu từ database thông qua DAO
     */
    public void fillToTable() {
        try {
            List<NguoiThue> danhSachNguoiThue = dao.findAll();
            
            DefaultTableModel model = new DefaultTableModel();
            
            String[] columnNames = {
                "Mã người dùng", "Họ và tên", "Số điện thoại", "Số CCCD", "Email", 
                "Giới tính", "Quê quán", "Ngày sinh", "Trạng thái thanh toán", "ID_Phòng"
            };
            model.setColumnIdentifiers(columnNames);
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            
            for (NguoiThue nguoiThue : danhSachNguoiThue) {
                Object[] tableRow = {
                    nguoiThue.getID_NguoiDung(),
                    nguoiThue.getHoVaTen() != null ? nguoiThue.getHoVaTen() : "N/A",
                    nguoiThue.getSdt() != null ? nguoiThue.getSdt() : "N/A",
                    nguoiThue.getSoCCCD() != null ? nguoiThue.getSoCCCD() : "N/A",
                    nguoiThue.getEmail() != null ? nguoiThue.getEmail() : "N/A",
                    nguoiThue.isGioiTinh() ? "Nam" : "Nữ",
                    nguoiThue.getQueQuan() != null ? nguoiThue.getQueQuan() : "N/A",
                    nguoiThue.getNgaySinh() != null ? dateFormat.format(nguoiThue.getNgaySinh()) : "N/A",
                    nguoiThue.isTrangThai() ? "Đã thanh toán" : "Chưa thanh toán",
                    nguoiThue.getID_Phong() != null ? nguoiThue.getID_Phong().toString() : "N/A"
                };
                model.addRow(tableRow);
            }
            
            tblNguoiThue.setModel(model);
            tblNguoiThue.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Lỗi khi tải dữ liệu: " + e.getMessage(), 
                "Lỗi", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    

    @Override
    public void init() {
        fillToTable();
        clear();
        setEditable(false);
    }

    @Override
    public void open() {
        fillToTable();
    }

    @Override
    public void create() {
        try {
            if (!validateForm()) {
                return;
            }
            
            NguoiThue entity = this.getForm();
            if (entity != null) {
                dao.create(entity);
                this.fillToTable();
                this.clear();
                XDialog.alert("Tạo mới người thuê thành công!");
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tạo mới người thuê: " + e.getMessage());   
            e.printStackTrace();
        }
    }

    @Override
    public void update() {
        NguoiThue entity = getForm();
        if(entity != null) {
            try {
                dao.update(entity);
                fillToTable();
                setEditable(false);
                XDialog.alert("Cập nhật người thuê thành công!");
            } catch(Exception e) {
                XDialog.alert("Cập nhật thất bại! " + e.getMessage());
                e.printStackTrace();
            }         
        }
    }

    @Override
    public void delete() {
        int selectRow = tblNguoiThue.getSelectedRow();
        
        if(selectRow >= 0) {
            try {
                Object value = tblNguoiThue.getValueAt(selectRow, 0);
                int nguoiThueId = (Integer) value;
                
                if(XDialog.confirm("Bạn có thật sự muốn xoá người thuê ID: " + nguoiThueId + "?")) {
                    dao.deleteById(nguoiThueId);
                    fillToTable();
                    clear();
                    XDialog.alert("Xoá người thuê thành công!");
                }
            } catch(Exception e) {
                XDialog.alert("Xoá người thuê thất bại: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            XDialog.alert("Vui lòng chọn một người thuê để xóa!");
        }    
    }

    @Override
    public void clear() {
        selectedId = null;
        txtHoTen.setText("");
        txtSDT.setText("");
        txtSoCCCD.setText("");
        txtEmail.setText("");
        txtMatKhau.setText("");
        txtQueQuan.setText("");
        txtNgaySinh.setText("");
        txtPhong.setText("");
        
        rdoDaThanhToan.setSelected(false);
        rdoChuaThanhToan.setSelected(true);
        rdoNam.setSelected(true);
        rdoNu.setSelected(false);
        
        tblNguoiThue.clearSelection();
        
        setEditable(true);
        
        btnAdd.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }

    @Override
    public void edit() {
        int selectRow = tblNguoiThue.getSelectedRow();
        
        if(selectRow >= 0) {
            try {
                Object value = tblNguoiThue.getValueAt(selectRow, 0);
                int nguoiThueId = (Integer) value; 
               
                NguoiThue nguoiThue = dao.findById(nguoiThueId);
                
                if(nguoiThue != null) {
                    setForm(nguoiThue);
                    setEditable(true); 
                } else {
                    XDialog.alert("Không tìm thấy người thuê với ID: " + nguoiThueId);              
                }
                    
            } catch(Exception e) {
                e.printStackTrace();
                XDialog.alert("Lỗi khi tải dữ liệu: " + e.getMessage());
            }          
        } else {
            XDialog.alert("Vui lòng chọn một người thuê để chỉnh sửa!");
        }
    }

    @Override
    public void setEditable(boolean editable) {        
        txtHoTen.setEditable(editable);
        txtSDT.setEditable(editable);
        txtSoCCCD.setEditable(editable);
        txtEmail.setEditable(editable);
        txtMatKhau.setEditable(editable);
        txtQueQuan.setEditable(editable);
        txtNgaySinh.setEditable(editable);
        txtPhong.setEditable(editable);
        
        rdoDaThanhToan.setEnabled(editable);
        rdoChuaThanhToan.setEnabled(editable);
        rdoNam.setEnabled(editable);
        rdoNu.setEnabled(editable);
    }

    @Override
    public void checkAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void uncheckAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveFirst() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void movePrevious() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveNext() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveLast() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveTo(int rowIndex) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
