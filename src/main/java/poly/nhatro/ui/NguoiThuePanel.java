package poly.nhatro.ui;

import poly.nhatro.entity.NguoiThue;
import java.util.List;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author Phu Pham
 */
public class NguoiThuePanel extends javax.swing.JPanel {

    private String selectedId = null;

    /**
     * Creates new form NguoiThuePanel
     */
    public NguoiThuePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtSoDienThoai = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtCmndCccd = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtMatKhau = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(110, 205));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(212, 412));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jLabel4.setText("Họ và tên");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4)
        );

        jPanel1.add(jPanel8);

        txtHoTen.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel1.add(txtHoTen);

        jLabel5.setText("Số điện thoại");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5)
        );

        jPanel1.add(jPanel9);

        txtSoDienThoai.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel1.add(txtSoDienThoai);

        jLabel3.setText("CCCD");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3)
        );

        jPanel1.add(jPanel5);

        txtCmndCccd.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel1.add(txtCmndCccd);

        jPanel2.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Email");
        jPanel2.add(jLabel1, new java.awt.GridBagConstraints());

        jPanel1.add(jPanel2);

        txtEmail.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel1.add(txtEmail);

        jLabel6.setText("Mật khẩu");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6)
        );

        jPanel1.add(jPanel6);

        txtMatKhau.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel1.add(txtMatKhau);

        btnAdd.setText("Thêm");
        btnAdd.setMaximumSize(new java.awt.Dimension(76, 57));
        btnAdd.setMinimumSize(new java.awt.Dimension(76, 57));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel4.add(btnAdd);

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel4.add(btnUpdate);

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel4.add(btnDelete);

        btnNew.setText("Làm mới");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jPanel4.add(btnNew);

        jPanel1.add(jPanel4);

        add(jPanel1, java.awt.BorderLayout.LINE_END);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        btnAdd.setEnabled(false);
        int row = jTable1.getSelectedRow();
        if (row != -1) {
            Object hoTen = jTable1.getValueAt(row, 1);
            Object sdt = jTable1.getValueAt(row, 2);
            Object cmnd = jTable1.getValueAt(row, 3);
            Object email = jTable1.getValueAt(row, 4);
            Object matKhau = jTable1.getValueAt(row, 5);
            txtHoTen.setText(hoTen != null ? hoTen.toString() : "");
            txtSoDienThoai.setText(sdt != null ? sdt.toString() : "");
            txtCmndCccd.setText(cmnd != null ? cmnd.toString() : "");
            txtEmail.setText(email != null ? email.toString() : "");
            txtMatKhau.setText(matKhau != null ? matKhau.toString() : "");
            // Lưu lại ID để cập nhật/xóa
            Object id = jTable1.getValueAt(row, 0);
            selectedId = (id != null) ? id.toString() : null;
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnNewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCmndCccd;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMatKhau;
    private javax.swing.JTextField txtSoDienThoai;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Đặt dữ liệu từ entity NguoiThue vào form
     * @param nguoiThue Entity NguoiThue cần hiển thị, null để clear form
     */
    public void setForm(NguoiThue nguoiThue) {
        if (nguoiThue == null) {
            clearForm();
            return;
        }
        
        try {
            // Đặt các trường text
            txtHoTen.setText(nguoiThue.getHoVaTen() != null ? nguoiThue.getHoVaTen() : "");
            txtSoDienThoai.setText(nguoiThue.getSdt() != null ? nguoiThue.getSdt() : "");
            txtCmndCccd.setText(nguoiThue.getSoCCCD() != null ? nguoiThue.getSoCCCD() : "");
            txtEmail.setText(nguoiThue.getEmail() != null ? nguoiThue.getEmail() : "");
            txtMatKhau.setText(nguoiThue.getMatKhau() != null ? nguoiThue.getMatKhau() : "");
            
            // Lưu ID để sử dụng cho update/delete
            selectedId = String.valueOf(nguoiThue.getID_NguoiDung());
            
            // Disable nút Add, enable các nút khác khi có dữ liệu
            btnAdd.setEnabled(false);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Lấy dữ liệu từ form để tạo entity NguoiThue
     * @return NguoiThue entity hoặc null nếu có lỗi
     */
    public NguoiThue getForm() {
        try {
            NguoiThue nguoiThue = new NguoiThue();
            
            // Lấy dữ liệu từ các text field
            nguoiThue.setHoVaTen(txtHoTen.getText().trim());
            nguoiThue.setSdt(txtSoDienThoai.getText().trim());
            nguoiThue.setSoCCCD(txtCmndCccd.getText().trim());
            nguoiThue.setEmail(txtEmail.getText().trim());
            nguoiThue.setMatKhau(txtMatKhau.getText().trim());
            
            // Đặt ID nếu đang edit (có selectedId)
            if (selectedId != null && !selectedId.isEmpty()) {
                nguoiThue.setID_NguoiDung(Integer.parseInt(selectedId));
            }
            
            // Đặt các giá trị mặc định
            nguoiThue.setTrangThai(true); // Mặc định là active
            nguoiThue.setGioiTinh(true);  // Mặc định là nam (có thể thêm UI cho này sau)
            
            return nguoiThue;
            
        } catch (NumberFormatException e) {
            return null;
        } catch (Exception e) {
            return null;
        }
    }
    
    /**
     * Xóa tất cả dữ liệu trên form
     */
    public void clearForm() {
        txtHoTen.setText("");
        txtSoDienThoai.setText("");
        txtCmndCccd.setText("");
        txtEmail.setText("");
        txtMatKhau.setText("");
        
        // Reset selected ID
        selectedId = null;
        
        // Enable nút Add, disable các nút khác
        btnAdd.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }
    
    /**
     * Validate dữ liệu form trước khi submit
     * @return true nếu dữ liệu hợp lệ
     */
    public boolean validateForm() {
        // Kiểm tra họ tên không được rỗng
        if (txtHoTen.getText().trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Họ và tên không được để trống!", 
                "Lỗi validation", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtHoTen.requestFocus();
            return false;
        }
        
        // Kiểm tra số điện thoại
        String sdt = txtSoDienThoai.getText().trim();
        if (sdt.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Số điện thoại không được để trống!", 
                "Lỗi validation", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtSoDienThoai.requestFocus();
            return false;
        }
        
        // Kiểm tra định dạng số điện thoại (10-11 số)
        if (!sdt.matches("^[0-9]{10,11}$")) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Số điện thoại phải có 10-11 chữ số!", 
                "Lỗi validation", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtSoDienThoai.requestFocus();
            return false;
        }
        
        // Kiểm tra CCCD
        String cccd = txtCmndCccd.getText().trim();
        if (cccd.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Số CCCD không được để trống!", 
                "Lỗi validation", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtCmndCccd.requestFocus();
            return false;
        }
        
        // Kiểm tra định dạng CCCD (12 số)
        if (!cccd.matches("^[0-9]{12}$")) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Số CCCD phải có 12 chữ số!", 
                "Lỗi validation", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtCmndCccd.requestFocus();
            return false;
        }
        
        // Kiểm tra email
        String email = txtEmail.getText().trim();
        if (!email.isEmpty() && !email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$")) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Định dạng email không hợp lệ!", 
                "Lỗi validation", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            txtEmail.requestFocus();
            return false;
        }
        
        return true;
    }
    
    /**
     * Hiển thị danh sách NguoiThue lên bảng
     * @param danhSachNguoiThue Danh sách người thuê cần hiển thị
     */
    public void setFormToTable(List<NguoiThue> danhSachNguoiThue) {
        try {
            // Tạo model cho bảng với các cột phù hợp
            DefaultTableModel model = new DefaultTableModel();
            
            // Định nghĩa các cột
            String[] columnNames = {
                "ID", "Họ và Tên", "SĐT", "CCCD", "Email", "Mật Khẩu", 
                "Giới Tính", "Quê Quán", "Ngày Sinh", "Trạng Thái", "ID Phòng"
            };
            model.setColumnIdentifiers(columnNames);
            
            // Thêm dữ liệu vào bảng
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            
            for (NguoiThue nguoiThue : danhSachNguoiThue) {
                Object[] row = {
                    nguoiThue.getID_NguoiDung(),
                    nguoiThue.getHoVaTen() != null ? nguoiThue.getHoVaTen() : "",
                    nguoiThue.getSdt() != null ? nguoiThue.getSdt() : "",
                    nguoiThue.getSoCCCD() != null ? nguoiThue.getSoCCCD() : "",
                    nguoiThue.getEmail() != null ? nguoiThue.getEmail() : "",
                    nguoiThue.getMatKhau() != null ? "****" : "", // Ẩn mật khẩu
                    nguoiThue.isGioiTinh() ? "Nam" : "Nữ",
                    nguoiThue.getQueQuan() != null ? nguoiThue.getQueQuan() : "",
                    nguoiThue.getNgaySinh() != null ? dateFormat.format(nguoiThue.getNgaySinh()) : "",
                    nguoiThue.isTrangThai() ? "Hoạt động" : "Không hoạt động",
                    nguoiThue.getID_Phong() != null ? nguoiThue.getID_Phong() : "Chưa gán"
                };
                model.addRow(row);
            }
            
            // Áp dụng model vào bảng
            jTable1.setModel(model);
            
            // Tùy chỉnh độ rộng cột
            if (jTable1.getColumnModel().getColumnCount() > 0) {
                jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);  // ID
                jTable1.getColumnModel().getColumn(1).setPreferredWidth(150); // Họ tên
                jTable1.getColumnModel().getColumn(2).setPreferredWidth(100); // SĐT
                jTable1.getColumnModel().getColumn(3).setPreferredWidth(120); // CCCD
                jTable1.getColumnModel().getColumn(4).setPreferredWidth(150); // Email
                jTable1.getColumnModel().getColumn(5).setPreferredWidth(80);  // Mật khẩu
                jTable1.getColumnModel().getColumn(6).setPreferredWidth(80);  // Giới tính
                jTable1.getColumnModel().getColumn(7).setPreferredWidth(120); // Quê quán
                jTable1.getColumnModel().getColumn(8).setPreferredWidth(100); // Ngày sinh
                jTable1.getColumnModel().getColumn(9).setPreferredWidth(100); // Trạng thái
                jTable1.getColumnModel().getColumn(10).setPreferredWidth(80); // ID Phòng
            }
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Hiển thị danh sách NguoiThue lên bảng với cột đơn giản (chỉ các trường có UI)
     * @param danhSachNguoiThue Danh sách người thuê cần hiển thị
     */
    public void setFormToTableBasic(List<NguoiThue> danhSachNguoiThue) {
        try {
            // Tạo model cho bảng với các cột cơ bản
            DefaultTableModel model = new DefaultTableModel();
            
            // Định nghĩa các cột cơ bản (chỉ những trường có trong UI form)
            String[] columnNames = {
                "ID", "Họ và Tên", "SĐT", "CCCD", "Email", "Trạng Thái"
            };
            model.setColumnIdentifiers(columnNames);
            
            // Thêm dữ liệu vào bảng
            for (NguoiThue nguoiThue : danhSachNguoiThue) {
                Object[] row = {
                    nguoiThue.getID_NguoiDung(),
                    nguoiThue.getHoVaTen() != null ? nguoiThue.getHoVaTen() : "",
                    nguoiThue.getSdt() != null ? nguoiThue.getSdt() : "",
                    nguoiThue.getSoCCCD() != null ? nguoiThue.getSoCCCD() : "",
                    nguoiThue.getEmail() != null ? nguoiThue.getEmail() : "",
                    nguoiThue.isTrangThai() ? "Hoạt động" : "Không hoạt động"
                };
                model.addRow(row);
            }
            
            // Áp dụng model vào bảng
            jTable1.setModel(model);
            
            // Tùy chỉnh độ rộng cột
            if (jTable1.getColumnModel().getColumnCount() > 0) {
                jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);  // ID
                jTable1.getColumnModel().getColumn(1).setPreferredWidth(200); // Họ tên
                jTable1.getColumnModel().getColumn(2).setPreferredWidth(120); // SĐT
                jTable1.getColumnModel().getColumn(3).setPreferredWidth(150); // CCCD
                jTable1.getColumnModel().getColumn(4).setPreferredWidth(200); // Email
                jTable1.getColumnModel().getColumn(5).setPreferredWidth(100); // Trạng thái
            }
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Lấy NguoiThue được chọn từ bảng
     * @return NguoiThue object từ dòng được chọn hoặc null nếu không có dòng nào được chọn
     */
    public NguoiThue getSelectedFromTable() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            return null;
        }
        
        try {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            
            NguoiThue nguoiThue = new NguoiThue();
            nguoiThue.setID_NguoiDung((Integer) model.getValueAt(selectedRow, 0));
            nguoiThue.setHoVaTen((String) model.getValueAt(selectedRow, 1));
            nguoiThue.setSdt((String) model.getValueAt(selectedRow, 2));
            nguoiThue.setSoCCCD((String) model.getValueAt(selectedRow, 3));
            nguoiThue.setEmail((String) model.getValueAt(selectedRow, 4));
            
            // Nếu có cột trạng thái
            if (model.getColumnCount() > 5) {
                String trangThai = (String) model.getValueAt(selectedRow, 5);
                nguoiThue.setTrangThai("Hoạt động".equals(trangThai));
            }
            
            return nguoiThue;
            
        } catch (Exception e) {
            return null;
        }
    }
    
    /**
     * Clear tất cả dữ liệu trong bảng
     */
    public void clearTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
    }
}
